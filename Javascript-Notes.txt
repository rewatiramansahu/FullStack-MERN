


=========================================== JavaScript ====================================================



- JavaScript is light weight interpreted and Just-in-Time [JIT] compiled programming language.
- Light weight allows to operate with less memory.
- Interpreted allows line by line translation.
- Compiled allows to translate all lines simultaneously at the same time.
- There are 2 types compiling techniques
    a) JIT (Just-in-Time)
    b) AoT (Ahead-of-Time)

- JIT translates Javascript in browser, when it is requested in browser.
- AOT translate JavaScript on server, before it is requested in browser.
- AOT requires explicit JavaScript compilers like "V8, Babel, Node" etc.
- JavaScript is a programming language that supports various programming approaches like
    a) Functional Programming
    b) Structural Programming
    c) Imperative Programming
    d) Object Oriented Programming etc..

Note: JavaScript is not an OOP language, It supports only few features of OOP.

- JavaScript is a programming language used in various layers and applications.
- JavaScript can be used
    a) Client Side                [with HTML]
    b) Server Side                [with Node JS]
    c) In Database            [with MongoDB]
    d) In Animation Tools        [with Flash, CAD Systems]

JavaScript Client Side:

- A script client side is required to reduce burden on server.
- It can improve the performance of application by managing various interaction client side.
- JavaScript can handle various interactions client side, which includes

    a) DOM Manipulation
        - Adding element to page
        - Removing element from page
        - Updating data into element
        - Configuring styles to element dynamically
        - Configuring events to element dynamically
    b) Validation
        - Verify user input
        - Validates the input
        - Reports if it is not according to requirements
    c)  Client Side Interactions
        - Managing client memory
        - Managing client devices
        - Managing Location
        - Sharing of data with other applications on client device

Issues with JavaScript as Language:

1. JavaScript is not a strongly typed language.

        var x = 10;        x is number
        x = "John";        valid

2. JavaScript is not implicitly strictly typed language.

        age = 22;            valid

3. JavaScript is not structured in handling data. [Schema less]

        [  
          { Name: "TV",  Price: 45000.44 },
          { Product:"Mobile", Cost: 12000.33}
        ]

4. JavaScript is not an OOP language, It have issues with
        a) Code Extensibility
        b) Code Level Security
        c) Dynamic Polymorphism etc..

5. JavaScript is not secured and can be blocked by browser


Solution:
- You can use "TypeScript" as alternative
- It is strongly typed
- It is strictly typed
- It is an OOP language.



======================================== Integrating JavaScript into HTML page ===============================================

Evolution of JavaScript:

- ECMA Script is the first scripting language used for Web Browsers.
- Mosaic is the browser that started implementing client side script.
- In early 1995 Netscape communications developed a browser called "Netscape Communicator".
- Netscape appointed "Brendan Eich" to design a client side script for Netscape Browser
- Brendan Eich designed a script by name "Mocha", later it is renamed as "Live Script".
- Netscape given the responsibility of Live Script to "Sun Microsystems".
- They renamed Live Script to "JavaScript".
- In early 2000 Netscape stopped it services and given the responsibility of JavaScript to ECMA.
- ECMA Started mantaining and evolving JavaScript by name "ES Script"
- ECMA Script 2014, 2015, 2016, 2017...22 => ES6, ES7, ES8, ECMAScript 2022
- JavaScript official documentation is designed by "MDN". [Brendan Eich]
- JavaScript is a scripting language, which is used in existing system to handle specific operations.

Integrating JavaScript into HTML Page:
- You can use javascript
   
    1. Inline
    2. Embedded
    3. External File

- Inline is the technique where the JavaScript functions are defined within the element tag. It is faster in access, however can't reuse.

Syntax:
    <button  onclick="window.print()">  Print </button>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inline</title>
    <style type="text/css" media="print">
        button {
            display: none;
        }
    </style>
</head>
<body>
    <h1>Ticket</h1>
    <button onclick="window.print()">Print</button>
</body>
</html>

- Embedded is the technique where javascript functions are kept in <script> container and accessed from any element in page.

Syntax:
   <script>
     function Name()
     {
     }
   </script>

    <button onclick="Name()">

FAQ's:
1. What is the MIME type for Script?
A.
    <script type="text/javascript"> </script>
                (or)
    <script language="javascript"> </script>

2. Where to embed script element?
A. You can embed in <head> or <body>

3.  What is strict mode? How to trun on JavaScript strict mode?
A.  It is used to force the developers to write logic as per coding standards.
      It is required to improve code consistancy.
      It is turned on by using the sentance:  "use strict";

Syntax:
    <script  type="text/javascript">
       "use strict";
        function Name()
        {
        }
    </script>

Ex:
<script>
    "use strict";
    x = 10;                        // invalid  - in strict mode x need to be defined.
    document.write(`x=${x}`);
</script>

Ex:
<script>
    x = 10;                        // valid
    document.write(`x=${x}`);
</script>

Ex:
<script>
    "use strict";
    var x;                        // valid
    x = 10;
    document.write(`x=${x}`);
</script>

4. How to target script for Legacy browsers?
A. By enclosing functions using HTML comments.

Syntax:
  <script type="text/javascript">
      <!--
       function Name()
       {
       }
       -->
   </script>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inline</title>
    <style type="text/css" media="print">
        button {
            display: none;
        }
    </style>
    <script type="text/javascript">
       <!--
        function PrintTicket()
        {
            window.print();
        }
        -->
    </script>
</head>
<body>
    <!-- HTML Comments -->
    <h1>Ticket</h1>
    <button onclick="PrintTicket()">Print</button>
</body>
</html>

- JavaScript functions can be defined in external file with extention ".js"
- So that you can reuse accross pages.
- It will increase the number of requests and also page load time.
- You can minify the code.

Syntax:
        print.js
    function Name()
    {

    }

    <script  type="text/javascript"  src="print.js"> </script>
    <button onclick="Name()">

Ex:
1. Go to "src/scripts" folder
2. Add a new file
        print.js
      <!--
        function PrintTicket()
        {
            window.print();
        }
        -->
3. Add code in HTML page

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inline</title>
    <style type="text/css" media="print">
        button {
            display: none;
        }
    </style>
    <script type="text/javascript" src="../src/scripts/print.js">
     
    </script>
</head>
<body>
    <!-- HTML Comments -->
    <h1>Ticket</h1>
    <button onclick="PrintTicket()">Print</button>
</body>
</html>

Class49- 19oct2023

================================== JavaScript Reference Techniques ============================

Refering HTML elements using JavaScript:

1. JavaScript can refer HTML elements by using DOM hierarchy

- Elements in page are arranged in a DOM hierarchy
- DOM comprises of root and child elements
                
				    window
                      |
            --------------------------
            |                   |
           document           location

- You can access elements by using DOM hierarchy

        window.document.images[ ]
        window.document.forms[]
        window.document.forms.elements[]

- Multiple elements are defined as a collection [Array], you can access using index.

         window.document.images[0]        => first occurance image in page

- Refering using index is faster in access and it is the native method.

- The issue with DOM hierarchy reference is, changing of index every time in code is required when ever element position changed.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function bodyload()
        {
            window.document.images[0].src = "../public/images/a1.jpg";
            window.document.forms[0].elements[2].value = "Register";
            window.document.forms[1].elements[1].value = "Login";
        }
    </script>
</head>
<body onload="bodyload()">
    <div>
        <img width="100" height="100" border="1">
    </div>
    <div>
        <h3>Register</h3>
        <form>
            User Name :  <input type="text"> <br><br>
            Password  :  <input type="password"> <br><br>
            <input type="button">
        </form>
    </div>
    <div>
        <h3>Login</h3>
        <form>
            Email : <input type="email"> <input type="button">
        </form>
    </div>
</body>
</html>

2. JavaScript can refer HTML elements by using a reference name.

- Every HTML element in page can have a reference name.

    <img name="poster">
    <input type="button" name="btnLogin">

- JavaScript can access elements with reference name.

     poster.src=""
     btnLogin.value=""

- You can't access a child element directly without refering to its parent.
- Name can be common for several elements in page, hence it is difficult to access element and apply dynamic properties.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function bodyload()
        {
           poster.src="../public/images/a2.jpg";
           frmRegister.btnRegister.value="Register";
           frmLogin.btnLogin.value = "Login";
        }
    </script>
</head>
<body onload="bodyload()">
    <div>
        <img width="100" height="100" border="1" name="poster">
    </div>
    <div>
        <h3>Register</h3>
        <form name="frmRegister">
            User Name :  <input type="text" name="UserName"> <br><br>
            <input type="button" name="btnRegister">
        </form>
    </div>
    <div>
        <h3>Login</h3>
        <form name="frmLogin">
            Email : <input type="email" name="Email"> <input name="btnLogin" type="button">
        </form>
    </div>
</body>
</html>

3. JavaScript can refer HTML elements by using "ID"

- Every HTML element can have a reference ID.
- JavaScript can access element with reference ID.
- You can access any child element directly, without refering to its parent.

     <img id="poster">
     <input type="button"  id="btnLogin">

- JavaScript method for refering ID is  "document.getElementById()"

      document.getElementById("poster").src=" "
      document.getElementById("btnLogin").value=" "

- ID can be common for several element, as it is used by CSS.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function bodyload()
        {
            document.getElementById("poster").src="../public/images/a3.jpg";
            document.getElementById("btnLogin").value = "Login";
            document.getElementById("btnRegister").value = "Register";
        }
    </script>
</head>
<body onload="bodyload()">
    <div>
        <img width="100" height="100" border="1" id="poster" name="poster">
    </div>
    <div>
        <h3>Register</h3>
        <form name="frmRegister">
            User Name :  <input type="text" name="UserName"> <br><br>
            <input type="button" name="btnRegister" id="btnRegister">
        </form>
    </div>
    <div>
        <h3>Login</h3>
        <form name="frmLogin">
            Email : <input type="email" name="Email"> <input id="btnLogin" name="btnLogin" type="button">
        </form>
    </div>
</body>
</html>

4. JavaScript can refer HTML elements using CSS selectors.

- HTML elements can be access with CSS selectors.
- CSS provides various selectors for configuring styles.
        a) Type Selector
        b) Class Selector
        c) ID selector
        d) Rational
        e) Structural Pseudo Classes etc...

- JavaScript uses the method  "document.querySelector()"

        <img>
        <input type="button" class="btn-primary">

        document.querySelector("img").src="" ;
        document.querySelector(".btn-primary").value=""
        document.querySelector("#btn").value=""
        document.querySelector("nav button")
        document.querySelector("table+div")

- CSS selector can be common for several elements in page.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function bodyload()
        {
             document.querySelector("img").src="../public/images/a4.jpg";
             document.querySelector(".btn-register").value="Register";
             document.querySelector("#btnLogin").value = "Login";
        }
    </script>
</head>
<body onload="bodyload()">
    <div>
        <img width="100" height="100" border="1">
    </div>
    <div>
        <h3>Register</h3>
        <form name="frmRegister">
            User Name :  <input type="text" name="UserName"> <br><br>
            <input type="button" class="btn-register">
        </form>
    </div>
    <div>
        <h3>Login</h3>
        <form name="frmLogin">
            Email : <input type="email" name="Email"> <input id="btnLogin" name="btnLogin" type="button">
        </form>
    </div>
</body>
</html>


Class50- 20oct2023


========================================= JavaScript output and Input ==========================================

1. Integrating JavaScript into HTML.
2. Refering HTML elements using JavaScript.


                    JavaScript Output Techniques

1. alert()
2. confirm()
3. document.write()
4. console methods [log(), warn(), info(), error(), debug()]
5. innerHTML
6. innerText
7. outerHTML

                                alert()

- It is a window method, that pops up a message box to display a string as output.
- It can directly present a string or can evaluate any expression and return result as string.

Syntax:
            alert("Welcome to JavaScript");
            alert(10 + 20);       "30"

- It will not allow any formats for string. It is RC data type.

            alert("<b>Welcome</b>");      bold not applied to text

- It will not allow to cancel the message box.
- It contains only OK to confirm.
- You can display message in multiple lines using "\n" as line break.

            alert("line1\nline2\nline3");

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function DeleteClick()
        {
            alert("are you sure?\nWant to delete?");
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
</body>
</html>

                                confirm()
- It is similar to alert, but provides cancel to close message box without confirming as OK.

Syntax:
        confirm("Are you sure?\nWant to Delete?");

- It is a boolean method, which returns  "true" on OK and "false" on Cancel.

Syntax:
          flag  = confirm("Are you sure?");
          if(flag==true)
          {
             actions on OK;
          }
          else
          {
              actions on Cancel;
          }

         =       it is assignment
         ==       it is comparision

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function DeleteClick()
        {
           flag =  confirm("Are you sure?\nWant to delete?");
           if(flag==true)
           {
              alert("Deleted Successfully..");
           }
           
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
</body>
</html>

                           document.write()
- It is a document method used to display output on new screen.
- It can present string, expression or markup.

Syntax:
    document.write("Welcome");
    document.write("Addition=" + (20+30));
    document.write("<b> Welcome </b>");

Note: To present a string within another string, you can switch between double and single quotes.

        "outer ' inner string ' string"

        'outer  " inner string " string'

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function DeleteClick()
        {
           flag =  confirm("Are you sure?\nWant to delete?");
           if(flag==true)
           {
              document.write("<h3><font color='red'>Deleted Successfully..</font></h3><a href='input.html'>Back</a>");
           }
           
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
</body>
</html>

                            innerText
- It is a property used for elements, which can display text content.
   <header> <nav> <footer> <div> <span> <h2> <p> <li> <blockquote> etc..
- It will not allow formats for text.
- It is only for plain string or any result of expression.
- It will not allow any markup.

Syntax:
        document.querySelector("div").innerText = "message | expression";

                            innerHTML

- It is similar to innerText but allows markup.
- It will not replace the existing element with new element.

                            outerHTML

- It is similar to innerHTML but will replace the existing element with new element.

Syntax:
    document.querySelector("p").outerHTML = "<h2> Welcome </h2>";
    document.querySelector("p").innerHTML = "<b>Welcome</b>";

                         Console Methods

- Console is a CLI [Command Line Interface] tool provided by browser debugging tools.
- It is used by developers to test JavaScript functions before implemented.
- It is also used to log various messages in development, which includes
        warn()
        error()
        log()
        info()
        debug() etc..

Syntax:
        console.log("string");
        console.log(expression);
        console.log("line1\nline2");

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function DeleteClick()
        {
           console.warn("Delete Button Clicked");
           flag =  confirm("Are you sure?\nWant to delete?");
           if(flag==true)
           {
              console.error("OK Confirmed");
              document.querySelector("p").outerHTML = "<h3><font color='red'>Deleted Successfully..</font></h3>"
           }
           else
           {
               console.log("Cancel Clicked");
               document.querySelector("p").innerText = "<i><b>You canceled..</i></b>";
           }
           
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
    <p></p>
</body>
</html>

                     JavaScript Input Techniques
1. prompt()
2. query string
3. form input elements

                          prompt()
- It can popup an input box in browser window, where user can input a value.
- It can access a plain string input. Even a number is converted as string.

Syntax:
        prompt("Your Message", "Default_Value");

- Prompt method returns

        null            ON cancel
        " "            ON ok without value
        value        ON ok with value

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function NewClick(){
           result = prompt("Enter Folder Name","New_Folder");
           if(result==null){
              alert("You Canceled..");
           }
            else if(result==""){
                alert("Please provide folder name");
            }
            else {
              document.querySelector("p").innerHTML += "Folder Created :" + result + "<br>";
           }
        }
    </script>
</head>
<body>
    <button onclick="NewClick()">New Folder</button>
    <p></p>
</body>
</html>




Class51- 26oct2023
================================== QueryString and Form Input Eelements ================================================

JavaScript Input Techniques
- prompt()            => null, " ", value
- query string
- form input elements

                            Query String
- Query String is a state management technique used in web application.
- It is the data appended into URL.
- You can view the query string in browser address bar, where it allows to input or edit the query string.
- Query String is appended into URL with "?" and it is a key/value collection.

Syntax:
        http://127.0.0.1:5500/page.html?key=value

- JavaScript provides "location.search()" which is used to access querystring.

        location.search()        => can pass arguments into query string
        location.search        => can access query string

- Querystring is returned using "location.search" property, which requires various string handling functions for manipulation.

        indexOf()            => It returns the index number of specified character in a
                             string.

        slice()            => It can extract the characters between specified index.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function bodyload(){
        str = location.search;
        document.querySelector("p").innerHTML = "Hello ! " +  str.slice(str.indexOf("=")+1);
        }
    </script>
</head>
<body onload="bodyload()">
    <p></p>
</body>
</html>

    http://127.0.0.1:5500/querystring.html?uname=john


                        Form Input Elements
- HTML form provides various elements to submit data, the input elements include
  text, password, number, range, date, radio, checkbox, dropdown etc.

- All form input elements have an accessor called "value", which is used to get and set value.

- You can read value defined in input element using "value" property.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inox Movies</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script type="text/javascript">
        function BookClick()
        {
            document.getElementById("summaryContainer").style.display = "block";
            document.getElementById("lblMovie").innerHTML = document.getElementById("lstMovies").value;
            document.getElementById("lblCinema").innerHTML = document.getElementById("lstCinemas").value;
            document.getElementById("lblDate").innerHTML = document.getElementById("lstDates").value;
            document.getElementById("lblTime").innerHTML = document.getElementById("lstTime").value;
            document.getElementById("lblSeats").innerHTML = document.getElementById("lstSeats").value;

            movie = document.getElementById("lstMovies").value;
            poster = document.getElementById("poster");
            screen = "";

            if(movie=="Leo") {
                poster.src = "../public/images/leo.png";
                screen = "Screen-2";
            } else {
                poster.src = "../public/images/tejas.png";
                screen = "Screen-3";
            }

            document.getElementById("lblScreen").innerHTML = screen;

        }
    </script>
</head>
<body class="container-fluid">
    <button class="btn btn-danger w-25 mt-3" data-bs-target="#booking" data-bs-toggle="modal">Quick Booking</button>
    <div class="modal fade" id="booking">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>Quick Booking</h3>
                    <button class="btn btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <nav class="d-flex bg-dark text-light justify-content-around p-2">
                        <div>
                            <select class="form-select" id="lstMovies">
                                <option>Select Movie</option>
                                <option>Leo</option>
                                <option>Tejas</option>
                            </select>
                        </div>
                        <div>
                            <select class="form-select" id="lstCinemas">
                                <option>Select Cinema</option>
                                <option>Inox GVK - Banjara Hills</option>
                                <option>Inox Ameerpet</option>
                            </select>
                        </div>
                        <div>
                            <select class="form-select" id="lstDates">
                                <option>Select Date</option>
                                <option>TODAY 26-OCT</option>
                                <option>TOMMOROW 27-OCT</option>
                            </select>
                        </div>
                        <div>
                            <select class="form-select" id="lstTime">
                                <option>Select Time</option>
                                <option>10:30 AM</option>
                                <option>6:30 PM</option>
                            </select>
                        </div>
                        <div>
                            <select class="form-select" id="lstSeats">
                                <option>Select Seats</option>
                                <option>1</option>
                                <option>2</option>
                                <option>3</option>
                            </select>
                        </div>
                        <div>
                            <button data-bs-dismiss="modal" onclick="BookClick()" class="btn btn-danger">Book</button>
                        </div>
                    </nav>
                </div>
            </div>
        </div>
    </div>
    <div class="w-25" id="summaryContainer" style="display: none;">
        <h3 class="bg-dark text-white mt-3 p-2">Booking Summary</h3>
        <dl class="row">
            <img id="poster" width="100%" height="200">
            <dt class="col-3">Movie</dt>
            <dd class="col-9" id="lblMovie"></dd>
            <dt class="col-3">Location</dt>
            <dd class="col-9" id="lblCinema"></dd>
            <dt class="col-3">Date</dt>
            <dd class="col-9" id="lblDate"></dd>
            <dt class="col-3">Time</dt>
            <dd class="col-9" id="lblTime"></dd>
            <dt class="col-3" >Screen</dt>
            <dd class="col-9" id="lblScreen"></dd>
            <dt class="col-3" >Seats</dt>
            <dd class="col-9" id="lblSeats"></dd>
        </dl>
        <button class="btn btn-link" data-bs-target="#booking" data-bs-toggle="modal">Modify Booking</button>
    </div>
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</body>
</html>


Class52 - 27oct2023
==================================== Form Input and Language Basics ====================================== 

Prompt()
Query String
Form Input Elements

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form Input</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script type="text/javascript">
        function RegisterClick(){

            document.getElementById("detailsContainer").style.display = "block";
            document.getElementById("buttonContainer").style.display = "none";

            document.getElementById("lblName").innerHTML = document.getElementById("txtName").value;
            document.getElementById("lblPrice").innerHTML = document.getElementById("txtPrice").value;
            document.getElementById("lblCity").innerHTML = document.getElementById("lstCities").value;

            stockCheckBox = document.getElementById("optStock");
            stockStatus = "";

            if(stockCheckBox.checked)
            {
                stockStatus = "Available";
            } else {
                stockStatus = "Out of Stock";
            }

            document.getElementById("lblStock").innerHTML = stockStatus;

        }
        function EditClick(){
            document.getElementById("lblTitle").innerHTML = "Edit Product";
            document.getElementById("btnRegister").innerHTML = "Save";
            document.getElementById("btnRegister").className = "btn btn-success";
        }
    </script>
</head>
<body class="container-fluid">
    <div id="buttonContainer" class="mt-4">
        <button class="btn btn-primary" data-bs-target="#register" data-bs-toggle="modal">Add Product</button>
    </div>
    <div class="modal fade" id="register">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 id="lblTitle">Add Product</h2>
                    <button class="btn btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <dl>
                        <dt>Name</dt>
                        <dd><input type="text" id="txtName" class="form-control"></dd>
                        <dt>Price</dt>
                        <dd><input type="number" id="txtPrice" class="form-control"></dd>
                        <dt>Shipped To</dt>
                        <dd>
                            <select class="form-select" id="lstCities">
                                <option>Select City</option>
                                <option>Delhi</option>
                                <option>Hyd</option>
                            </select>
                        </dd>
                        <dt>Stock</dt>
                        <dd class="form-switch">
                            <input class="form-check-input" type="checkbox" id="optStock"> <label class="form-check-label">Available</label>
                        </dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button data-bs-dismiss="modal" onclick="RegisterClick()" id="btnRegister" class="btn btn-primary">Register</button>
                    <button class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    <div id="detailsContainer" style="display: none;">
        <h2>Product Details</h2>
        <dl>
            <dt>Name</dt>
            <dd id="lblName"></dd>
            <dt>Price</dt>
            <dd id="lblPrice"></dd>
            <dt>City</dt>
            <dd id="lblCity"></dd>
            <dt>Stock</dt>
            <dd id="lblStock"></dd>
        </dl>
        <button onclick="EditClick()" data-bs-target="#register" data-bs-toggle="modal" class="btn btn-warning bi bi-pen-fill"> Edit </button>
    </div>
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</body>
</html>

Summary
- JavaScript Integration
    a) Inline
    b) Embedded
    c) External File
- JavaScript reference techniques
    a) Using DOM hierarchy
    b) Using Name
    c) Using ID
    d) Using Query Selector
- JavaScript Output
    a) alert()
    b) confirm()
    c) console methods
    d) innerHTML
    e) outerHTML
    f) innerText
    g) document.write()
- JavaScript Input
    a) prompt()
    b) query string
    c) form input elements

                        JavaScript Language
1. Variables
2. Data Types
3. Operators
4. Statements
5. Functions
6. OOP


                         JavaScript Variables

- Variables are storage locations in memory, where you can store a value and use it as a part of any expression.

- Variables are strongly typed in various language. They are defined with specific data type and will not allow other types.

                int  age = "john";        // invalid
                int  age  = 22;            // valid
                int  age  = true;        // invalid

- JavaScript variables are not strongly typed.
- JavaScript variables are implicitly typed. The data type is determined according to the value assigned.

                age    = 22;        // valid
                age = "John";        // valid
                age = true;        // valid

- JavaScript variables can be used directly without declaration if javascript is not in strict mode.

Syntax:
        <script>
             age = 22;                        => valid
             document.write("Age=" + age);
        </script>

        <script>    
           "use strict";
            age = 22;                        => Invalid
            document.write("Age=" + age);
        </script>

- JavaScript variables are declared by using 3 keywords

        a) var
        b) let
        c) const

- Variable configuration in programming language comprises of 3 phases

        a) Declaring
        b) Assigning
        c) Initialization

Syntax:
        var age;            => declaring variable
        age = 22;            => assigning value into variable

        var age = 22;        => initializing value into variable.

var:
- It defines a function scope variable.
- You can declare in any block of a function and can access from any another block inside function.
- It allows declaring, assigning and initialization.

Ex:
<script>
    function f1()
    {
        var x;                  // declaring
        x = 10;                 // assigning
        if(x==10)
        {
            var y = 20;         // initalization
        }
        document.write("x=" + x + "<br>" + "y=" + y);
    }
    f1();
</script>

- It allows shadowing.
- Shadowing is the process of re-declaring same name identifier with in the scope.

Ex:
<script>
    function f1()
    {
        var x;                  // declaring
        x = 10;                 // assigning
        if(x==10)
        {
            var y = 20;         // initalization
            y = 30;             // assigning
            y = 40;             // assigning
            var y = 50;         // shadowing
        }
        document.write("x=" + x + "<br>" + "y=" + y);
    }
    f1();
</script>

- It allows hoisting.
- Hoisting allows to use a variable and declare later.
<script>
    "use strict";
    x = 10;
    document.write("x=" + x);
    var x;   //hoisting
</script>

Class52- Date 28oct2023

=============================== JavaScript Variables and Data Types ==================================

JavaScript Variables
- declaring
- assigning
- initialization
- var

let:
- It defines a block scope variable.
- Block scope uses a closure technique.
- Closure allows the members of outer block accessible to inner block.
- It is accessible with in the block where it is declared and its inner blocks.
- It allows declaring, initialization and assignment.
- It will not allow shadowing and hoisting.

const:
- It defines a block scope variable.
- It allows only initialization.
- It will not allow declaring and assigning.
- It will not allow hoisting and shadowing.

FAQ: Can a const variable change its value?
Ans: Yes. At the time of initializing memory.

FAQ: Is const and readonly same?
Ans: No. readonly can't change but const can change.

Global Scope for variable:
- Global scope allows a variable to access from any function.
- Global scope is technically "Module Scope".
- Module scope refers to <script> area.

Syntax:
    <script>
        // module scope
        function f1()
        {
           // function scope
        }
        // module scope
    </script>

- You can declare a global variable using var, let or const by configuring it at module scope.

Ex:
<script>
   
   let y = 20;
   const z = 30;
   var x = 10;
   function f1(){
     
     document.write("function-1 <br> x=" + x + "<br>y=" + y + "<br>z=" + z + "<br>");
   }
   function f2(){
    document.write("function-2 <br> x=" + x + "<br>y=" + y + "<br>z=" + z + "<br>");
   }
   f1();
   f2();
</script>

FAQ: Can we define a variable in function and make it global in access?
Ans: Yes. It is possible by configuring variable as "window" variable.
         [It is possible only for javascript in browser]

Syntax:
        window.variableName = value;

        document.write(variableName);
Ex:
<script>
   "use strict";
   let y = 20;
   const z = 30;
 
   function f1(){
     window.x = 5;
     document.write("function-1 <br> x=" + x + "<br>y=" + y + "<br>z=" + z + "<br>");
   }
   function f2(){
    document.write("function-2 <br> x=" + x + "<br>y=" + y + "<br>z=" + z + "<br>");
   }
   f1();
   f2();
</script>

FAQ: What is local and global scope?
Ans:  local refers to function & block.
     global refers to module.

Variable Naming Rules:
- It must start with an alphabet.
- You can start with "_" symbol but special characters are not recommended.
- It can be alpha numeric with special characters, but avoid special characters.
   
        var 2023Sales;        // invalid
        var Sales2023;        // valid
        var Sales 2023;        // invalid
        var Sales.2023;        // invalid
        var Sales_2023;        // valid
        var _2023Sales;        // valid

- It can't be a keyword.

        var while;            // invalid
        var class;            // invalid

- It's max length must be upto 255 chars only.
- It must speak what it is.
- It is recommended to use "Camel Case".

        var u = "John";            // Not Good
        var userName = "John";        // Good

        var studentName;
        var studentFee;

        var _productName;     => Not yet implemented

           
                        JavaScript Data Types

- Data Type defines complete data structure [DS].
- It is about the type, range and behaviour.
- JavaScript can handle various types of data in memory.
- The data types are classified into 2 categories

    1. Primitive Types
    2. Non-Primitive Types

Primitive Types:
- They are immutable types.
- Immutable mean's structure can't be changed.
- They have a fixed range for value.
- Value range can't change.
- They are stored in memory stack.
- Stack uses LIFO [Last-in First-out] mechanism.
- JavaScript Primitive types are

    1. Number
    2. String
    3. Boolean
    4. Null
    5. Undefined
    6. Symbol
    7. Bigint


Class54- Date 30oct2023

===================================== JavaScript Number Type ============================================

Primitive Data Types of JavaScript
1. number
2. string
3. boolean
4. null
5. undefined
6. bigint
7. symbol


                            Number Type

- Number type refers to numeric value.
- JavaScript number type can handle
       
        Signed Integer        -5
        Unsigned Integer       5
        Floating Point         34.00
        Double                 456.00
        Decimal                4560.5645 [29]
        Exponent               2e3 [2000]
        Bigint                 9983838252n
        Binary                 0b1010
        Hexa                   304f94
        Octa                   0o783


         var x = 2e3;        => 2000
         var x = 0b1010    => 10

- Every value that user inputs from UI is by default string type, hence we need parsing methods to convert a string type into number.

        a) parseInt()
        b) parseFloat()
       
Syntax:
        parseInt("23");
        parseInt("23.56");    23
        parseFloat("23.56");  23.56

Ex:
<script>
   var userName = prompt("Enter Name");
   var age = parseInt(prompt("Enter Age"));
   document.write("Hello ! " + userName + " You will be " + (age+1) + " Next Year.");
</script>

Ex:
<script>
    var rate = parseFloat(prompt("Enter Interest Rate"));
    document.write("Interest Rate : " + rate);
</script>


Note: JavaScript can convert any value into number type only when it is starting with a numeric type.

        parseInt("20A") + parseInt("30")        => 50
        parseInt("A20") + parseInt("30")        => NaN (Not a Number)
        parseInt("30A20") + parseInt("30")    => 60
        parseInt("A") + parseInt("30")            => NaN

- You can validate number input by using the method "isNaN()".
- It returns boolean true if input value is not a number.

Syntax:
        if (isNan(value))
        {
           statement on true;
        }
        else
        {
          statement on false;
        }

Ex:
<script>
    var age = parseInt(prompt("Enter Age"));
    if(isNaN(age))
    {
        document.write("Age must be a Number");
    } else {
        document.write("Age=" + age);
    }
</script>

- JavaScript provides methods for converting a number into string.

    a) toString()
    b) toLocaleString()

- "toString()" converts number into a string format. So that you can handle string operations. [slice, trim, substr, substring, indexOf...]

- "toLocaleString()"  converts number into regional string format, which can be applied with various number and date formats.

Syntax:
          var  price = 45000.44;
          price.toLocaleString("local-encode", {  
            style : "currency | date | time",
            currency: "format"
        })

Ex:
<script>
    var price = 56000.44;
    document.write("Price=" + price.toLocaleString("en-IN", {
        style: 'currency',
        currency: 'INR'
    }));
</script>

    MDN => To get help for JavaScript functions

- JavaScript provides "Math" object to handle various mathematical operations on numbers.
- The basic arithematic operators of JavaScript are

        +        Addition
        -        Substraction
        /        Division
        %        Modulus
        *        Multiplication
        **        Power [Number Raised to Power]
        ++        Increment
        --        Decrement

- JavaScript Math library provides various functions and properties

        Math.PI
        Math.sqrt()
        Math.pow()    
        Math.round()
        Math.random()
        Math.floor()
        Math.ceil()
        Math.sin()
        Math.cos()
        Math.tan() etc..


Class55- Date 31oct2023

======================================================= EMI Calculator ==========================================================

- How to validate number?
  isNaN()
- How to convert a string format to number?
  parseInt()
  parseFloat()
- How to convert a number into string?
  toString()
  toLocaleString()
- Math Functions
- Arithematic Operators

Ex: EMI Calculator

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EMI Calculator</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script type="text/javascript">
        function AmountChange(){
           document.getElementById("txtAmount").value = document.getElementById("rangeAmount").value;
        }
        function YearChange(){
            document.getElementById("txtYears").value = document.getElementById("rangeYear").value;
        }
        function RateChange(){
            document.getElementById("txtRate").value = document.getElementById("rangeRate").value;
        }
        function CalculateClick(){
            var P = parseInt(document.getElementById("txtAmount").value);
            var R = parseFloat(document.getElementById("txtRate").value)/12/100;
            var N = parseInt(document.getElementById("txtYears").value)*12;
            var EMI = P * R * Math.pow((1+R),N) / Math.pow((1+R),N)-1;
            document.getElementById("lblResult").innerHTML = "Your EMI amount every month is &#8377;<b>" + Math.round(EMI) + " </b>for " + N + " months."
        }
    </script>
</head>
<body class="container-fluid bg-dark">
    <h3 class="text-center text-light mt-4">Personal Loan EMI Calculator</h3>
    <div class="bg-light p-4">
        <div class="row">
            <div class="col">
                Amount you need &#8377; <input type="text" id="txtAmount">
            </div>
            <div class="col">
                for <input type="text" id="txtYears" size="4"> years
            </div>
            <div class="col">
                Interest rate <input type="text" id="txtRate" size="4"> %
            </div>
        </div>
        <div class="row mt-4">
            <div class="col">
                <input type="range" onchange="AmountChange()" class="form-range" id="rangeAmount" min="50000" max="1000000" value="50000">
            </div>
            <div class="col">
                <input type="range" onchange="YearChange()" class="form-range" id="rangeYear" min="1" max="5" value="1">
            </div>
            <div class="col">
                <input type="range" onchange="RateChange()" class="form-range" id="rangeRate" min="10.50" value="10.50" step="0.1" max="21.00">
            </div>
        </div>
        <div class="row mt-3">
            <div class="col d-flex justify-content-between">
                <span>&#8377; 50,000</span>
                <span>&#8377; 10,00,000</span>
            </div>
            <div class="col d-flex justify-content-between">
                <span>1</span>
                <span>5</span>
            </div>
            <div class="col d-flex justify-content-between">
                <span>10.5%</span>
                <span>21%</span>
            </div>
        </div>
        <div class="row mt-4">
            <div class="col text-end">
                <button onclick="CalculateClick()" class="btn btn-primary">Calculate</button>
            </div>
        </div>
        <div class="row mt-4">
            <div class="col text-center">
                <span id="lblResult" class="h3"></span>
            </div>
        </div>
    </div>
</body>
</html>

Task: BMI Calculator

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function bodyload(){
            var bmi = parseInt(prompt("Enter BMI"));
            var value = document.getElementById("YourValue");
            if(bmi>=1 && bmi<=20){
                value.style.marginLeft = "50px";
            } else if(bmi>20 && bmi<=25) {
                value.style.marginLeft = "150px";
            }
           
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <div class="mt-4">
        <div class="progress w-50">
            <div class="progress-bar bg-dark" style="width: 25%;">
                Underweight
            </div>
            <div class="progress-bar bg-info ms-1" style="width: 25%;">
                Normal
            </div>
            <div class="progress-bar bg-warning ms-1" style="width: 25%;">
                Overweight
            </div>
            <div class="progress-bar bg-danger ms-1" style="width: 25%;">
                Obsese
            </div>
        </div>
        <div id="YourValue">
            <span class="bi bi-caret-down-fill"></span>
            <div>You</div>
        </div>
    </div>
</body>
</html>


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function bodyload(){
            var bmi = parseInt(prompt("Enter BMI"));
            var value = document.getElementById("YourValue");
            if(bmi>=1 && bmi<=20){
                value.style.marginLeft = "50px";
            } else if(bmi>20 && bmi<=25) {
                value.style.marginLeft = "150px";
            }
           
        }
        function CaclulateClick(){
            var p = document.querySelector("p");
            var optMale = document.getElementById("optMale");
            var optFemale = document.getElementById("optFemale");
            if(optMale.checked) {
                p.innerHTML = "Formula for Male";
                //write the formula for male
            }
            if(optFemale.checked){
                p.innerHTML = "Formula for Female";
            }
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <div class="mt-4">
        <div class="progress w-50">
            <div class="progress-bar bg-dark" style="width: 25%;">
                Underweight
            </div>
            <div class="progress-bar bg-info ms-1" style="width: 25%;">
                Normal
            </div>
            <div class="progress-bar bg-warning ms-1" style="width: 25%;">
                Overweight
            </div>
            <div class="progress-bar bg-danger ms-1" style="width: 25%;">
                Obsese
            </div>
        </div>
        <div id="YourValue">
            <span class="bi bi-caret-down-fill"></span>
            <div>You</div>
        </div>
    </div>
    <div>
        <input type="radio" class="form-check-input" checked id="optMale" name="Gender"> <label class="form-check-label">Male</label>
        <input type="radio" class="form-check-input" id="optFemale" name="Gender"> <label class="form-check-label">Female</label>
        <button onclick="CaclulateClick()">Calculate</button>
        <p></p>
    </div>
</body>
</html>


Class56- Date 01nov2023

=================================== String =======================================

String Type

- String is a literal with group of characters enclosed in

        a) Single Quotes        '  '
        b) Double Quotes        " "
        c) Back Ticks            ` `            

- A literal comprises of alpha numeric and special characters.

        var  anchor = "<a href='home.html'> Home </a>";
        var  anchor = '<a  href="home.html"> Home </a>';

- Double and single quote string requires lot of concatination with dynamic values.

- JavaScript ES5+ version introduced backtick for string. It allows embedded expression, which is known as data-binding expression.

- Data Binding expression is defined with "${ }".

- Binding expression is not allowed in string with double or single quote.

Syntax:
        string = `your string ${expression | dynamic value} your string`;

Ex:
<script>
    var userName = prompt("Enter Name");
    var age = parseInt(prompt("Enter Age"));
    var msg1 = "Hello !" + " " + userName + " " + "you will be" + " " + (age+1) + " " + "next year.<br>";
    var msg2 = `Hello ! ${userName} you will be ${age+1} next year.`;
    document.write(msg1);
    document.write(msg2);
</script>

Ex:
<script>
    var type = prompt("Enter Element Type","text|email|date|radio..");
    var element = `<input type=${type}>`;
    document.write(element);
</script>

Ex:
<script>
    var type = prompt("Enter Element Type","text|email|date|radio..");
    var element = `<input type=${type}><br>`;
    var component = "<input type=" + type + ">";
    document.write(element);
    document.write(component);
</script>

Note: Data binding expression is used to create complex templates.
      A template refers to markup with dynamic expressions.
      Backtick can be used in template binding.

Ex:
<script>
    var title = prompt("Enter Title");
    var label1 = prompt("Enter Label-1");
    var element1 = prompt("Enter Element 1 type");
    var button = prompt("Enter Button Text");
    var component = `
       <h2>${title}</h2>
       <dl>
          <dt>${label1}</dt>
          <dd><input type=${element1}></dd>
       </dl>
       <button>${button}</button>
    `;
    document.write(component);
</script>

- JavaScript provides various methods to format and manipulate string.
- JavaScript string is technically an object. It is an array of characters.

      Welcome    =>  ["w", "e", "l", "c", "o", "m", "e"]

- JavaScript string formatting methods are
       
        bold()
        italics()
        fontsize()
        fontcolor()
        toUpperCase()
        toLowerCase()
        sup()
        sub()
        big()
        small()  etc..

Syntax:
        var msg = "Welcome".bold().italics().fontcolor('red').fontsize('5');

        O/P:   "<b><i><font color='red' size='5'> Welcome </font> </i></b>"

Note: Some string formats can't be applied to RC data types.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyOTP(){
            var otp = document.getElementById("txtOtp").value;
            var error = document.getElementById("error");
            if(otp=="3465"){
                error.innerHTML = "OTP Verified".fontcolor('green').italics();
            } else {
                error.innerHTML = "Invalid OTP".fontcolor('red').bold().italics();
            }
        }
        function ChangeCase(){
            var username = document.getElementById("txtName").value;
            document.getElementById("txtName").value = username.toUpperCase();
        }
    </script>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd><input type="text" onkeyup="ChangeCase()" id="txtName" placeholder="Block Letters Only"></dd>
        <dt>OPT</dt>
        <dd><input type="text" id="txtOtp" onblur="VerifyOTP()" size="4"></dd>
        <dd id="error"></dd>
    </dl>
</body>
</html>

- JavaScript provides limited set of formatting methods for string.
- If you want to apply CSS formats to string then you can defined by using "style" property.
- In CSS style property is defined with a specific format, but in JavaScript the style properties are defined in camel case.

            CSS                        JavaScript
           
            background-color            backgroundColor
            box-shadow                boxShadow
            font-weight                fontWeight

Syntax:
      var str = "Welcome";
      str.style.fontWeight = "bold";
      str.style.color = "red";
      str.style.textShadow = "2px 2px 2px gray";

- The process of configuring styles to HTML element dynamically using JavaScript is known as "Style Binding".

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function bodyload(){
            var para = document.querySelector("p");
            para.innerHTML = "Welcome to JavaScript";
            para.style.fontSize = "100px";
            para.style.fontWeight = "bold";
            para.style.textShadow = "5px 5px 2px gray";
            para.style.color = "yellow";
        }
    </script>
</head>
<body onload="bodyload()">
    <p></p>
</body>
</html>


- You can bind styles using CSS class name, which is known as class binding.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .text-effects {
            font-size: 100px;
            font-weight: bold;
            text-shadow: 5px 5px 2px gray;
            color:yellow;
        }
    </style>
    <script>
        function bodyload(){
            var para = document.querySelector("p");
            para.innerHTML = "Welcome to JavaScript";
            para.className ="text-effects";
        }
    </script>
</head>
<body onload="bodyload()">
    <p></p>
</body>
</html>


Class57- Date 02nov2023

================================================ String Handling ================================================

String Type
    a) Data Binding  ${ }
String Formatting Methods
    a) Style Binding
    b) Class Binding

- Data Binding is the process of accessing data from source and binding to UI.
- Style Binding is the process of binding style attributes to element dynamically.
- Class Binding is the process of binding CSS classes to element dynamically.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Class Binding</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function ThemeChange(){
            var chkTheme = document.getElementById("chkTheme");
            var form = document.querySelector("form");
            var button = document.querySelector("button");

            if(chkTheme.checked){
                form.className = "w-25 bg-dark text-white p-4 border border-2 rounded";
                button.className = "btn btn-light w-100";
            } else {
                form.className = "w-25 bg-light text-dark p-4 border border-2 rounded";
                button.className = "btn btn-dark w-100";
            }
        }
    </script>
</head>
<body class="container-fluid d-flex justify-content-center align-items-center" style="height: 100vh;">
    <form class="w-25 border border-2 p-4 rounded border-dark">
        <div class="form-switch">
            <input type="checkbox" id="chkTheme" onchange="ThemeChange()" class="form-check-input"> <label class="form-check-label">Dark Mode</label>
        </div>
        <div>
            <h3>User Login</h3>
            <dl>
                <dt>User Name</dt>
                <dd><input type="text" class="form-control"></dd>
                <dt>Password</dt>
                <dd><input type="password" class="form-control"></dd>
            </dl>
            <button class="btn btn-dark w-100">Login</button>
        </div>
    </form>
</body>
</html>

Task:

                      String Manipulation Properties & Methods

1. length        : It returns the total count of characters in a string.

Syntax:
    var  str = "Welcome";
    str.length;            => 7

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyName(){
            var userName = document.getElementById("txtName").value;
            var nameError = document.getElementById("nameError");
            if(userName.length==0) {
                nameError.innerHTML = "Name Required".fontcolor('red');
            } else {
                if(userName.length<4){
                nameError.innerHTML = "Name too short..".fontcolor('red');
                } else {
                    nameError.innerHTML = "";
                }
            }
        }
    </script>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd><input type="text" onkeyup="VerifyName()" id="txtName"></dd>
        <dd id="nameError"></dd>
    </dl>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyChars(){
            var chars = document.querySelector("textarea").value;
            var maxLimit = 100;
            var remain = maxLimit - parseInt(chars.length);
            document.getElementById("msg").innerHTML = `${remain} chars left`;
        }
    </script>
</head>
<body>
    <fieldset>
        <legend>Your Comments</legend>
        <samp>Note: Max 100 chars</samp>
        <br><br>
        <textarea rows="4" maxlength="100" cols="40" onkeyup="VerifyChars()"></textarea>
        <p id="msg"></p>
    </fieldset>
</body>
</html>

2. charAt()        : It returns the character at specified index.

3. charCodeAt()    : It returns the code of character as specified index. [ASCII]


Syntax:
    var str = "Ajay";
    str.charAt(0);            => A
    str.charCodeAt(0);        => 65        65 to 90 [A-Z]

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyName(){
            var txtName = document.getElementById("txtName").value;
            var nameError = document.getElementById("nameError");
            if(txtName.charCodeAt(0)>=65 && txtName.charCodeAt(0)<=90){
                nameError.innerHTML ="";
            } else {
                nameError.innerHTML = "Name must start with uppercase letter".fontcolor('red');
            }
        }
    </script>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd><input type="text" onblur="VerifyName()" id="txtName" placeholder="Name must start with uppercase letter"></dd>
        <dd id="nameError"></dd>
    </dl>
</body>
</html>

4. startsWith()        : It returns true if string starts with specified char(s).

5. endsWith()        : It returns true if string ends with specified char(s).

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function VerifyCard(){
            var card = document.getElementById("txtCard").value;
            var imgCard = document.getElementById("imgCard");
            if(card.startsWith("4455")) {
                imgCard.src = "../public/images/master.png";
            } else {
                imgCard.src = "../public/images/visa.png";
            }
        }
        function VerifyEmail(){
            var email = document.getElementById("Email").value;
            var emailError = document.getElementById("emailError");
            if(email.endsWith("gmail.com")) {
                emailError.innerHTML = "";
            } else {
                emailError.innerHTML = "Only Gmail is Allowed".fontcolor('red');
            }
        }
    </script>
</head>
<body class="container-fluid">
    <dl class="mt-4">
        <dt>Your Card Number</dt>
        <dd class="input-group">
            <input type="text" onblur="VerifyCard()" id="txtCard"> <img width="40" height="30" id="imgCard">
        </dd>
        <dt>Your Gmail</dt>
        <dd><input type="email" onblur="VerifyEmail()" id="Email"></dd>
        <dd id="emailError"></dd>
    </dl>
</body>
</html>

6. indexOf()        : It returns the index number of specified character in a string.
                  It returns -1 if the character not found.
                  It returns first occurance index number.

Syntax:
    var  str = "Welcome";
    str.indexOf("e");        1
    str.indexOf("a");        -1

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function VerifyCard(){
            var card = document.getElementById("txtCard").value;
            var imgCard = document.getElementById("imgCard");
            if(card.startsWith("4455")) {
                imgCard.src = "../public/images/master.png";
            } else {
                imgCard.src = "../public/images/visa.png";
            }
        }
        function VerifyEmail(){
            var email = document.getElementById("Email").value;
            var emailError = document.getElementById("emailError");
            if(email.indexOf("@")==-1) {
                emailError.innerHTML = "Invalid Email".fontcolor('red');
            } else {
                if(email.endsWith("gmail.com")) {
                emailError.innerHTML = "";
                } else {
                    emailError.innerHTML = "Only Gmail is Allowed".fontcolor('red');
                }
            }
        }
    </script>
</head>
<body class="container-fluid">
    <dl class="mt-4">
        <dt>Your Card Number</dt>
        <dd class="input-group">
            <input type="text" onblur="VerifyCard()" id="txtCard"> <img width="40" height="30" id="imgCard">
        </dd>
        <dt>Your Gmail</dt>
        <dd><input type="email" onblur="VerifyEmail()" id="Email"></dd>
        <dd id="emailError"></dd>
    </dl>
</body>
</html>

Class58- 03nov2023

============================== JavaScript String Methods ===================================

String Handling
length
charAt()
charCodeAt()
indexOf()
startsWith()
endsWith()

Syntax:
     property = value;
     method(value)

lastIndexOf()    : It returns the last occurance index number of specified character in a
              string.

Syntax:
    var str = "Welcome";
    str.indexOf("e");        1
    str.lastIndexOf("e");        6

slice()        : It is used to extract the chars between specified index.

Syntax:
    str.slice(startIndex, endIndex);    => returns chars between start & end index.
    str.slice(startIndex);            => returns chars from start index to end of string.
    str.slice(0,7);
    str.slice(7,0);  // invalid            => end index must be greater than start index.
    str.slice(7);


substr()        : It is used to extract specified number of chars from given index.

Syntax:
    str.substr(startIndex, totalCountofCharsToRead);
    str.substr(startIndex);            => It reads upto end.
    str.substr(7,3);                    => from 7 it reads 3 chars
    str.substr(7,0);                    => empty
    str.substr(7);                    => from 7 to end


substring()    : It can read the chars between the given index range, which can be
              bi-directional.

Syntax:
    str.substring(startIndex, endIndex);  => end index can be bi-directional
    str.substring(startIndex)               => from specified index to end.
    str.substring(7);
    str.substring(7,15);                => from 7 to 15 index
    str.substring(7,0);                => from 7 to 0 index


Program: Write a program to extract and separate email id and domain.

        var email = "somename@gmail.com"
        var id = email.substring(email.indexOf("@"),0);
        var domain = email.substring(email.indexOf("@") + 1);

Program:
        var str = "?username=john";

        var name = str.substring(str.indexOf("=")+1);

Program
        var str = "?key=value";
        var key = str.substring(str.indexOf("="),1);
        var value = str.substring(str.indexOf("=") +1);

Ex:
<script>
    var str = "?price=45000";
    var key = str.substring(str.indexOf("="),1);
    var value = str.substring(str.indexOf("=")+1);
    document.write(`
       Key = ${key} <br>
       value = ${value}
    `);
</script>

split()        : It can split the string at specific character and return array of strings.

Syntax:
    var str = "Home|About|Contact";
    var items = str.split('|');            => items[ Home, About, Contact ]
    items[0]    => Home
    items[1]   => About
    items[2]   => Contact

Ex:
<script>
    var str = "Home|About|Contact";
    var items = str.split('|');
    document.write(`
        ${items[0]} <br>
        ${items[1]} <br>
        ${items[2]}
    `);
</script>

Ex:
<script>
    var contacts = "john-john_nit@gmail.com, david-david@msn.com";
    var [john, david, sam] = contacts.split(',');
    document.write(`
       ${david} <br>
       ${john} <br>
    `);
</script>


trim()        : It is used to remove the leading spaces in string.
              [space before and after]

Syntax:
    var str = "   john    ";

    str.trim();  => "john"
    str        => "  john   ";


match()        : It is used to verify the format of input value using a regular expression.
              It returns boolean "true" if value is matching with expression.

Note: Regular Expression in JavaScript is enclosed in "/   /".

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyPassword(){
            var password = document.getElementById("Password").value;
            var pwdError = document.getElementById("pwdError");
            var regExp = /(?=.*[A-Z])\w{4,15}/;
            if(password.match(regExp))
            {
                pwdError.innerHTML = "Strong Password".fontcolor('green');
            } else {
                if(password.length<4) {
                    pwdError.innerHTML = "Poor Password".fontcolor('red');
                } else {
                    pwdError.innerHTML = "Weak Password".fontcolor('goldenrod');
                }
            }
        }
    </script>
</head>
<body>
    <dl>
        <dt>Password</dt>
        <dd><input type="password" onkeyup="VerifyPassword()" id="Password"></dd>
        <dd id="pwdError"></dd>
    </dl>
</body>
</html>


Class59- Date 04nov2023

=================================== JavaScript Boolean Type =====================================

Primitive Types
- Number
- String

                           Boolean Type
- Boolean type is used for decision making in computer programming.
- JavaScript boolean values can be "true or false".
- Boolean type can be verified using 0 or 1.

        0     =  false
        1    =  true

 Syntax:
        var  x  = 1;        => Number
        var  x  = true;        => Boolean

        if(x==true)
        if(x==1)            => true    [Not recommended]

HTML Boolean Attributes:
        readonly            <input type="text" readonly="true">
        required
        disabled
        checked
        border [table]        <table border="1">        1 = true, 0 = false

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function CheckBoxChange(){
            var chkEnable = document.getElementById("chkEnable");
            var UserName = document.getElementById("UserName");
            if(chkEnable.checked)
            {
                UserName.disabled = true;
            } else {
                UserName.disabled = false;
            }
        }
    </script>
</head>
<body>
    <input type="checkbox" onchange="CheckBoxChange()" id="chkEnable"> Enable / Disable User Name
    <dl>
        <dt>User Name</dt>
        <dd><input type="text" id="UserName"></dd>
    </dl>
</body>
</html>

FAQ:
1. What is the result of   "true + true"?
A. 2

2. What is the result of   true + "A" ?
A. trueA

3. What is the result  of   true + 11 ?
A. 12

4. How to convert string "true" into boolean true.
A. You have to manually convert by using decision making operators or statements.

Syntax:
      var x = "true";
      var result = (x=="true")?true:false;
      console.log(typeof result);            => boolean
      console.log(typeof x);                => string

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function SubmitClick(){
            var choice = document.getElementById("Choice").value;
            console.log(typeof choice);
            var result = (choice=="true")?true:false;
            console.log(typeof result);
        }
    </script>
</head>
<body>
    <input type="text" id="Choice" placeholder="true/false"> <button onclick="SubmitClick()">Submit</button>
</body>
</html>

Ternary Operator:
- It is a special operator used in decision making.
- It is similar to a simple "IF" statement with "Else" clause.
- The operator is  "?:"

Syntax:
    (condition/booleanExpression) ? statement_on_true : statement_of_false

Ex: Toggle with boolean

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        function SortToggle(){
            var btnSort = document.getElementById("btnSort");
            btnSort.className = (btnSort.className=="bi bi-sort-alpha-down")?"bi bi-sort-alpha-up":"bi bi-sort-alpha-down";
        }
        function StockToggle(){
            var chkStock = document.getElementById("chkStock");
            var lblStock = document.getElementById("lblStock");
            lblStock.innerHTML = (chkStock.checked)?"In Stock":"Out of Stock";
        }
        function ShowToggle(){
            var btnShow = document.getElementById("btnShow");
            btnShow.innerHTML = (btnShow.innerHTML=="Show")?"Hide":"Show";
            var img = document.getElementById("poster");
            img.style.display = (img.style.display=="none")?"block":"none";
        }
    </script>
</head>
<body>
    <div>
        <button class="bi bi-sort-alpha-down" id="btnSort" onclick="SortToggle()"></button>
    </div>
    <br>
    <input type="checkbox" onchange="StockToggle()" id="chkStock"> <label id="lblStock">Out of Stock</label>
    <br>
    <div>
        <button id="btnShow" onclick="ShowToggle()">Show</button>
        <br><br>
        <img src="../public/images/a1.jpg" width="200" style="display:none" height="200" id="poster">
    </div>
</body>
</html>

Decision Making Operators and Statements:

        ==            Equal
        ===            Identical Equal
        !=            Not Equal
        !==            Not Identical
        >            Greater than
        >=            Greater than or Equal
        <            Less than
        <=            Less than or Equal
        &&            Logical AND
        ||            Logical OR
        !            NOT

FAQ: What is difference between "==" & "===" ?
Ans :  "==" can compare values of different types.
      "===" can compare only values of same type.

Syntax:
        var x =  10;
        var y  = "10";
       
        x == y         => true
        x === y    => false

FAQ: How to compare a value with regular expression?
Ans : By using string method "match()"

    var mobile = "+919876543210";
    var regExp = /\+91\d{10}/;

    mobile===regExp            => invalid
    mobile==regExp            => invalid
    mobile.match(regExp)        => valid

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyPassword(){
            var pwd = document.getElementById("Pwd").value;
            var confirmPwd = document.getElementById("confirmPwd").value;
            var error = document.getElementById("error");
            if(pwd===confirmPwd)
            {
                error.innerHTML = "";
            } else {
                error.innerHTML = "Password Mismatch".fontcolor('red');
            }
        }
    </script>
</head>
<body>
    <dl>
        <dt>Password</dt>
        <dd><input type="password" id="Pwd"></dd>
        <dt>Confirm Password</dt>
        <dd><input type="password" onblur="VerifyPassword()" id="confirmPwd"></dd>
        <dd id="error"></dd>
    </dl>
</body>
</html>

Class60- Date 06nov2023

================================== Conditional Statements =====================================

Conditional Statements:

- A statement is used to control the execution flow in a program.
- Conditional Statements are used in decision making.
- Conditional Statements are also known as Selection Statements.
- JavaScript selection statements are defined using the keyworkd
        if, else, switch, case, default

The "IF" statement:
- It is a decision making statement used to execute a set of statements when given condition evaluates to true and another set of statements when it evaluates to false.

- The "IF" statement have various forms

1. Forward Jump
2. Simple Decision
3. Multi Level Decisions
4. Multiple Decisions

Forward Jump:
- It is a decision making approach where there is no alternative.
- User will go to next only when the current condition is satisfied.

Syntax:
    if (condition)
    {
     statement on true;
    }


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyCard(){
            var card = document.getElementById("Card").value;
            if(card==="4444555566667890"){
                document.getElementById("Cvv").disabled = false;
            }
        }
        function VerifyCvv(){
            var cvv = document.getElementById("Cvv").value;
            if(cvv==="345") {
                document.getElementById("Expiry").disabled = false;
            }
        }
        function VerifyExpiry(){
            var expiry = document.getElementById("Expiry").value;
            if(expiry==="2024"){
                document.getElementById("btnPay").disabled = false;
            }
        }
    </script>
</head>
<body>
    <fieldset>
        <legend>Payment Details</legend>
        <dl>
            <dt>Card Number</dt>
            <dd><input type="text" id="Card" onblur="VerifyCard()" maxlength="16"></dd>
            <dt>CVV</dt>
            <dd><input type="text" id="Cvv" onblur="VerifyCvv()" size="4" disabled></dd>
            <dt>Expiry</dt>
            <dd>
                <select id="Expiry" disabled onchange="VerifyExpiry()">
                    <option>Choose Exipry</option>
                    <option>2023</option>
                    <option>2024</option>
                    <option>2025</option>
                </select>
            </dd>
        </dl>
        <button id="btnPay" disabled>Pay</button>
    </fieldset>
</body>
</html>

Ex: Show and Hide Container

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyCard(){
            var card = document.getElementById("Card").value;
            if(card==="4444555566667890"){
                document.getElementById("Cvv").disabled = false;
                document.getElementById("cvvContainer").style.display = "block";
            }
        }
        function VerifyCvv(){
            var cvv = document.getElementById("Cvv").value;
            if(cvv==="345") {
                document.getElementById("Expiry").disabled = false;
                document.getElementById("expiryContainer").style.display = "block";
            }
        }
        function VerifyExpiry(){
            var expiry = document.getElementById("Expiry").value;
            if(expiry==="2024"){
                document.getElementById("btnPay").disabled = false;
                document.getElementById("btnPay").style.display = "block";
            }
        }
    </script>
</head>
<body>
    <fieldset>
        <legend>Payment Details</legend>
        <dl>
            <dt>Card Number</dt>
            <dd><input type="text" id="Card" onblur="VerifyCard()" maxlength="16"></dd>
            <div id="cvvContainer" style="display: none;">
                <dt>CVV</dt>
                <dd><input type="text" id="Cvv" onblur="VerifyCvv()" size="4" disabled></dd>
            </div>
            <div id="expiryContainer" style="display: none;">
                <dt>Expiry</dt>
                <dd>
                    <select id="Expiry" disabled onchange="VerifyExpiry()">
                        <option>Choose Exipry</option>
                        <option>2023</option>
                        <option>2024</option>
                        <option>2025</option>
                    </select>
                </dd>
            </div>
        </dl>
        <button id="btnPay" style="display: none;" disabled>Pay</button>
    </fieldset>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function SubmitClick(){
            var optMale = document.getElementById("optMale");
            var optFemale = document.getElementById("optFemale");
            var msg = document.getElementById("msg");
            if(optMale.checked){
                msg.innerHTML = `Your Gender : ${optMale.value}`;
            }
            if(optFemale.checked){
                msg.innerHTML = `Your Gender : ${optFemale.value}`;
            }
        }
    </script>
</head>
<body>
    <input type="radio" name="gender" value="Male" id="optMale"> <label>Male</label>
    <input type="radio" name="gender" value="Female" id="optFemale"> <label>Female</label>
    <br>
    <button onclick="SubmitClick()">Submit</button>
    <p id="msg"></p>
</body>
</html>

2. Simple Decision
- It provides one alternative to execute when the given condition is false.
- Alternative is defined using "else" clause.

Syntax:
    if (condition)
    {
     statement on true;
    }
    else
    {
     statement on false;
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyCard(){
            var card = document.getElementById("Card").value;
            if(card==="4444555566667890"){
                document.getElementById("Cvv").disabled = false;
                document.getElementById("cvvContainer").style.display = "block";
            } else {
                alert("Invalid Card");
            }
        }
        function VerifyCvv(){
            var cvv = document.getElementById("Cvv").value;
            if(cvv==="345") {
                document.getElementById("Expiry").disabled = false;
                document.getElementById("expiryContainer").style.display = "block";
            } else {
                alert("Invalid CVV");
            }
        }
        function VerifyExpiry(){
            var expiry = document.getElementById("Expiry").value;
            if(expiry==="2024"){
                document.getElementById("btnPay").disabled = false;
                document.getElementById("btnPay").style.display = "block";
            } else {
                alert("Invalid Expiry")
            }
        }
    </script>
</head>
<body>
    <fieldset>
        <legend>Payment Details</legend>
        <dl>
            <dt>Card Number</dt>
            <dd><input type="text" id="Card" onblur="VerifyCard()" maxlength="16"></dd>
            <div id="cvvContainer" style="display: none;">
                <dt>CVV</dt>
                <dd><input type="text" id="Cvv" onblur="VerifyCvv()" size="4" disabled></dd>
            </div>
            <div id="expiryContainer" style="display: none;">
                <dt>Expiry</dt>
                <dd>
                    <select id="Expiry" disabled onchange="VerifyExpiry()">
                        <option>Choose Exipry</option>
                        <option>2023</option>
                        <option>2024</option>
                        <option>2025</option>
                    </select>
                </dd>
            </div>
        </dl>
        <button id="btnPay" style="display: none;" disabled>Pay</button>
    </fieldset>
</body>
</html>

3. Multi Level Decisions
- In this approach it uses forward jump and checks every condition individually.
- So that it can identify the exact issues and report in multiple conditions.

Syntax:
 if(condition1)
 {
    if(condition2)
    {
    statement on both conditions true;
    }else{
       statement on condition2 false
    }
 }
 else {
   statement of condition1 false;
 }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function PayClick(){
            var card = document.getElementById("Card").value;
            var cvv = document.getElementById("Cvv").value;
            var expiry = document.getElementById("Expiry").value;
            var msg = document.getElementById("msg");


            if(card==="4444555566667890"){
                if(cvv==="345"){
                    if(expiry==="2024"){
                        document.write("Payment Success..");
                    } else {
                        msg.innerHTML = "Invalid Expiry".fontcolor('red');
                    }
                } else {
                    msg.innerHTML= "Invalid Cvv".fontcolor('red');
                }
            } else {
                msg.innerHTML = "Invalid Card".fontcolor('red');
            }
        }
    </script>
</head>
<body>
    <fieldset>
        <legend>Payment Details</legend>
        <dl>
            <dt>Card Number</dt>
            <dd><input type="text" id="Card"  maxlength="16"></dd>
            <div id="cvvContainer">
                <dt>CVV</dt>
                <dd><input type="text" id="Cvv" size="4" ></dd>
            </div>
            <div id="expiryContainer">
                <dt>Expiry</dt>
                <dd>
                    <select id="Expiry">
                        <option>Choose Exipry</option>
                        <option>2023</option>
                        <option>2024</option>
                        <option>2025</option>
                    </select>
                </dd>
            </div>
        </dl>
        <button id="btnPay" onclick="PayClick()">Pay</button>
        <p id="msg" align="center"></p>
    </fieldset>
</body>
</html>

Class61- Date 07nov2023

====================================== javascript Selection Statements ======================================

Selection Statements
- IF Statement
    a) Forward Jump
    b) Simple Decision
    c) Multi Level Decisions
   
Multiple Choices:
- We can provide multiple alternatives to perform specified task.

Syntax:
    if (condition-1 )
    {
      statements on condition-1 true;
    }
    else if (condition-2)
    {
      statements on condition-2 true;
    }
        else
    {
      statements when all conditions evaluate to false;
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Amazon</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script type="text/javascript">
        var flag = "";
        function ContinueClick(){
            var UserId = document.getElementById("UserId").value;
            var UserIdContainer = document.getElementById("UserIdContainer");
            var PasswordContainer = document.getElementById("PasswordContainer");
           
            if(UserId==="john_nit@gmail.com"){
                flag = `Login Success - Verification mail sent to ${UserId}`;
                UserIdContainer.style.display = "none";
                PasswordContainer.style.display = "block";
            }
            else if(UserId==="+919876543210") {
                flag = `Login Success - OTP Sent to your mobile ${UserId}`;
                UserIdContainer.style.display = "none";
                PasswordContainer.style.display = "block";
            }
            else{
                document.getElementById("UserError").innerHTML = `${UserId} doesn't Exist`;
            }
        }
        function LoginClick(){
            var password = document.getElementById("Password").value;
            if(password==="john@123"){
                document.write(`<h1>${flag}</h1>`);
            } else {
                document.getElementById("PwdError").innerHTML = "Invalid Password";
            }
        }
    </script>
</head>
<body class="container-fluid d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="w-25 border border-1 p-4 rounded">
        <h2>SignIn</h2>
        <div id="UserIdContainer">
            <label class="form-label fw-bold">Email or mobile phone number</label>
            <div>
                <input type="text" id="UserId" class="form-control">
                <div id="UserError" class="text-danger"></div>
            </div>
            <div class="mt-4">
                <button onclick="ContinueClick()" class="btn btn-warning w-100">Continue</button>
            </div>
        </div>
        <div id="PasswordContainer" style="display: none;">
            <label class="form-label fw-bold">Password</label>
            <div>
                <input type="password" id="Password" class="form-control">
                <div id="PwdError" class="text-danger"</div>
            </div>
            <div class="mt-4">
                <button onclick="LoginClick()" class="btn btn-warning w-100">Login</button>
            </div>
        </div>
    </div>
</body>
</html>
   
Logical AND :
- It defines multiple expressions in one statement.
- It returns true only when all expressions evaluate to true.
- It returns false if any one condition evaluates to false.

Syntax:
        expression-1  &&  expression2   && expression3

Logical OR:
- It defines multiples expressions in one statement.
- It returns true if any one expression evaluates to true.
- It returns false if all expressions evaluate to false.

Syntax:
        expression-1  ||  expression2  || expression3

Program: Write a program to find the greatest among 2 numbers  a & b.
Startup Code:
        function  FindGreatest(a, b)
        {
            // your logic;
        }
Solution :
        function FindGreatest(a, b)
        {
             if(a>b)
             {
              document.write(`Your number a=${a} is greater than b=${b}`);
             }
            else{
              document.write(`Your number b=${b} is greater than a=${a}`);
            }
        }
        FindGreatest(20,3);        => a is greater
        FindGreatest(20,50);        => b is greater

Program: Write a program to find the greatest among 3 number a, b, c

Startup code:
        function FindGreatest(a, b, c)
        {
            // your logic
        }
        FindGreatest(20, 12, 65)    => c is greater
        FindGreatest(12,56,24)        => b is greater
        FindGreatest(34,11,22)        => a is greater

Solution Code:
        function FindGreatest(a, b, c)
        {
            if(a>b && a>c)
            {
                document.write("a is greater");
            }
            else if(b>c) {
                document.write("b is greater");
            } else {
                document.write("c is greater");
            }
        }
Ex:
<script>
        function FindGreatest(a, b, c)
        {
            if(a>b && a>c){
                document.write(`a=${a} is greater than b=${b} & c=${c}`);
            } else if(b>c) {
                document.write(`b=${b} is greater than a=${a} & c=${c}`);
            } else {
                document.write(`c=${c} is greater than a=${a} & b=${b}`);
            }
        }
        FindGreatest(110, 240, 50);
</script>

Program: Find value in range or out of range.

Startup Code:
        function  FindRange(value, min, max)
        {
            // logic
        }

        FindRange(10, 1, 20);        => In range
        FindRange(10, 20, 60);        => out of range

Ex:
<script>
      function FindRange(value, min, max){
         if(value>=min && value<=max) {
             document.write(`Your value ${value} is in range of ${min} to ${max}`);
         } else {
            document.write(`Your value ${value} is NOT in range of ${min} to ${max}`);
         }
      }
      FindRange(prompt("Enter Value"), prompt("Enter Min"), prompt("Enter Max"));
</script>

Program :  Check if a triangle is equilateral, scalene, or isosceles

Startup Code:  
            function  findTriangleType(side1, side2, side3)
            {
                // logic
            }

Solution Code:
function findTriangleType(side1, side2, side3) {

  if((side1 == side2) && (side1 == side3)){
    console.log(`Equilateral triangle.`)
  }
  else if ((side1 == side2) || (side2 == side3) || (side1 == side3)){
    console.log(`Isosceles triangle.`)
  }
  else{
    console.log(`Scalene triangle.`)
  }
}


findTriangleType(12,12,12) //"Equilateral triangle."
findTriangleType(20,20,31) //"Isosceles triangle."
findTriangleType(5,4,3) //"Scalene triangle."

Class62- Date 08nov2023

=============================== javascript Switch Case ===============================

Switch Selector:
- Switch is used to interrupt the flow of electrons in circuit.
- Switches are classified into various types
    a) Toggle switch
    b) Push button switch
    c) Selector switch
    d) Joystick switch etc..

- Selector switch allows to choose exactly the block that matches given condition.

Syntax:
    switch(value | expression)
    {
       case  value | expression:
        statements on match;
        jump_statement;
       
       default:
        statements when value | expression doesn't match;
        jump_statement;
    }

Ex:
<script>
     var n = parseInt(prompt("Enter Number"));
     switch(n)
     {
        case 1:
          document.write("One");
          break;
        case 2:
         document.write("Two");
         break;
        case 3:
         document.write("Three");
         break;
        case 4:
         document.write("Four");
         break;
        default:
         document.write("Please enter 1 to 4 only");
         break;
     }
</script>

FAQ's:
1. Can we define switch without default ?
A. Yes.

2. Can we define default above or between cases?
A. Yes.

3. Can we use case without "jump" statement? [break]
A. Yes. If jump statement is not defined then it will stop when next jump occurs.

Ex:
<script>
     var n = parseInt(prompt("Enter Number"));
     switch(n)
     {
     
        case 1:
          document.write("One");
          break;
        case 2:
         document.write("Two");
         break;
        case 3:
         document.write("Three<br>");
        case 4:
         document.write("Four");
         break;
         default:
         document.write("Please enter 1 to 4 only");
         break;
     }
</script>


4. Can we use "return" as jump statement in switch?
A. Yes.

5. What is difference between break and return?
A. break will terminate the current block but will stay in function, compiler is ON.
     return will terminate the compiling. [stop every thing]

Note: "return" can be used only with in  function.

Ex:
<script>
    function f1(){
      var n = parseInt(prompt("Enter Number"));
     switch(n)
     {
     
        case 1:
          document.write("One");
          break;
        case 2:
         document.write("Two");
         break;
        case 3:
         document.write("Three<br>");
         return;
        case 4:
         document.write("Four");
         break;
         default:
         document.write("Please enter 1 to 4 only");
         break;
     }
    }
    f1();
</script>

6. Can we define case value as string or boolean?
A. Yes.

Ex:
<script>
    var choice = prompt("Enter Choice", "Y|N");
    switch(choice)
    {
       case "y":
       document.write("You selected yes to continue");
       break;
       case "n":
       document.write("You selected no to stop");
       break;
       default:
       document.write("Please enter yes or no");
       break;
    }
</script>

7. Can we define multiple cases for single block?
A. Yes.

Ex:
<script>
    var choice = prompt("Enter Choice", "Y|N");
    switch(choice)
    {
       case "y":
       case "Y":
       document.write("You selected yes to continue");
       break;
       case "n":
       case "N":  
       document.write("You selected no to stop");
       break;
       default:
       document.write("Please enter yes or no");
       break;
    }
</script>

Note: You can transform and change case if you are using a string as case value.

Ex:
<script>
    var choice = prompt("Enter Choice", "Yes|No");
    switch(choice.toLowerCase())
    {
       case "yes":
       document.write("You selected yes to continue");
       break;
       case "no":
       document.write("You selected no to stop");
       break;
       default:
       document.write("Please enter yes or no");
       break;
    }
</script>

8. How to define a case and switch for range of values?
A. By using boolean expression in case and boolean true in switch.

Ex:
<script>
    var n = parseInt(prompt("Enter number"));
    switch(true)
    {
       case (n>=1 && n<=10):
       document.write(`Your number ${n} is between 1 to 10`);
       break;
       case (n>10 && n<=20):
       document.write(`Your number ${n} is between 11 to 20`);
       break;
       default:
       document.write(`Please enter a number between 1 to 20`);
       break;
    }
</script>

Class63- Date 09nov2023

===========================  Switch Example, Null and Undefined ===========================

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Switch Demo</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script type="text/javascript">
        var pattern = / /;
       
        function CountryChange(){
            var countryName = document.getElementById("lstCountries").value;
            var imgFlag = document.getElementById("imgFlag");
            var txtMobile = document.getElementById("txtMobile");
            switch(countryName)
            {
                case "India":
                imgFlag.src = "../public/images/india.png";
                pattern = /\+91\d{10}/;
                txtMobile.placeholder = "eg: +91 and 10 digits";
                break;
                case "US":
                imgFlag.src = "../public/images/us.png";
                pattern = /\+\(1\)\(\d{3}\)\s\d{4}-\d{4}/;
                txtMobile.placeholder = "eg:+(1)(453) 5532-5677";
                break;
                case "UK":
                imgFlag.src = "../public/images/uk.png";
                pattern = /\+\(44\)\d{4}-\d{5}/;
                txtMobile.placeholder = "eg: +(44)4567-77883";
                break;
                default:
                imgFlag.src= "";
                imgFlag.alt = "N/A";
                pattern = / /;
                txtMobile.placeholder = "Please select your country";
                break;
            }
        }
        function VerifyClick(){
            var mobile = document.getElementById("txtMobile").value;
            var error = document.getElementById("error");
            if(mobile.match(pattern)) {
                document.write("<h1>Mobile Verified Successfully..</h1>");
            } else {
                error.innerHTML = `Invalid Mobile : ${document.getElementById("txtMobile").placeholder}`;
            }
        }
    </script>
</head>
<body class="container-fluid">
    <h3>Verify Mobile</h3>
    <dl class="w-25">
        <dt>Select Your Country </dt>
        <dd>
            <img width="50" height="50" id="imgFlag">
        </dd>
        <dd>
            <select class="form-select" id="lstCountries" onchange="CountryChange()">
                <option>Choose Country</option>
                <option>India</option>
                <option>US</option>
                <option>UK</option>
            </select>
        </dd>
        <dt>Your Mobile</dt>
        <dd>
            <input type="text" class="form-control" id="txtMobile">
        </dd>
        <button class="btn btn-primary w-100" onclick="VerifyClick()">Verify</button>
    </dl>
    <p class="text-center text-danger h2" id="error"></p>
</body>
</html>

Summary
- Number
- String
- Boolean
   a) Comparision Operators   ==, ===, >, >=, <, <=, !=, !==
   b) Logical Operators    &&, ||  
   c) Selection Statements
    if, else, switch, case, default

       
                           Undefined Type
- It is a type assigned to variables if value is not defined during compile time.
- It is a type used to verify value in a reference variable during compile time.

Syntax:
    var price;
    document.write("Price=" + price);               Price=undefined

- You can use "undefined" keyword to verify value defined or not.

Ex: Not Good Code
<script>
    var name = "Samsung TV";
    var rating;
    if(rating==undefined){
        document.write(`Name=${name}`);
    } else {
    document.write(`Name=${name} <br> Rating=${rating}`);
    }
</script>

Ex: Good Code

<script>
    var name = "Samsung TV";
    var rating;
    if(rating)
    {
        document.write(`Name=${name} <br> Rating=${rating}`);
    } else {
        document.write(`Name=${name}`);
    }
</script>

FAQ: What is difference between undefined and not-defined?
Ans:  undefined is about the value.
     not-defined is about the reference.

     If value is not present then it returns undefined.
     If reference not present then it returns not defined.


                             Null Type
- Null is a type used to verify the values during runtime.
- If a reference is not provided with value at runtime then javascript returns null.
- The keyword "null" is used to verify value in a reference.

Syntax:
    var price = prompt("Enter Price");
   
    price => returns string on OK
    price => returns null on Cancel

Ex:
<script>
    var name = "Samsung TV";
    var rating = prompt("Enter Rating");
    if(rating==null)
    {
        document.write(`Name=${name}`);
       
    } else {
        document.write(`Name=${name} <br> Rating=${rating}`);
    }
</script>

Class64- 10nov2023

============================= JavaScript Non Primitive Types ==========================

Primitive Types
- Number
- Bigint
- String
- Boolean
- Null
- Undefined
- Symbol

Note: You can submit value of any field without displaying in "form", by using the element <input type="hidden">.

                         Non-Primitive Type
- They are mutable types.
- Structure can change dynamically.
- They doesn't have any fixed range for values.
- Value range varies according to the memory available.
- They are stored in memory heap.
- JavaScript non-primitive types include
   
    a) Array
    b) Object
    c) Map
    d) Set [obsolete]


                            Array Type

- Arrays are introduced into computer programming to reduce overhead and complexity.
- Arrays can reduce overhead by storing values in sequential order.
- Arrays can reduce complexity by storing multiple values under the reference of single name.
- Array can store various types of values, but some technologies are not capable of storing different types of value in sequential order hence they restrict array for same type of values.
- JavaScript array can handle various types of values.
- Array size can change dynamically, which is restricted in various technologies.
- Array is sequentially arranging elements that can accessed in random.


Configuring Array:
- Array configuration comprises of various phases.

    a) Declare a variable for Array
    b) Assign or Initialize memory for Array
    c) Store values in array
    d) Read values from array
    e) Manipulate values in array

Syntax:
     var  values;            // declaring variable for array
     values = [ ];            // assigning memory using meta character
     values = new Array();    // assigning memory using constructor.

                        (or)
      var  values = [ ];                // declaring and initializing memory
      var  values = new Array();

Note: "new" is dynamic memory allocation operator.

- Meta character refers to a static memory, which is contineous memory. The memory allocated for first request will continue accross other requests. [connected]

- Array constructor refers to a dynamic memory, which is new allocated for every request. It is good for discreet operations. [disconnected]

Storing Values into Array:
- You can intialize values or assign values.
- Assignment requires a property reference to store values.
- Property is a string type that maps to the Index which is number type.

Syntax:
    var  values = [10, "A", true];

     var values = [ ];
     values[0] = 10;
     values["1"] = "A";
     values["2"] = true;

Ex:
<script>
    var values =  new Array();
    values[0] = 10;
    values[1] = "A";
    values[2] = true;
    values["3"] = "John";
    for(var property in values){
        document.write(`${property} [${typeof property}] : ${values[property]}[${typeof values[property]}] <br>`);
    }
    document.write(values["1"]);
</script>


Class65- Date 11nov2023

============================= JavaScript Arrays ===================================


- ES5+ versions introduced Array destructuring technique.

Syntax: Without Destructure

    var  products = ["Samsung TV - 45000.55", "Fastrack Watch - 2400.45"];
        var  tv = products[0];
        var  watch = products[1];

Syntax: Using Destructure

    var  products = ["Samsung TV - 45000.55", "Fastrack Watch - 2400.45"];
        var  [tv, watch] = products;
        var  [tv, watch, mobile] = products;

        mobile = undefined;

- JavaScript array can store any type of value, primitive or non-primitive.

Ex:
<script>
    var values = [1, "TV", true, ["Delhi", "Hyd"], function(){document.write("Hello")}];
    document.write(values[3][1] + "<br>");
    values[4]();
</script>

Ex:
<script>
    var values = [[10,20],["A","B"],[["X","Y"]]];
    document.write(values[2][0][1])
</script>

- JavaScript provides various methods and properties to manipulate array.
- Manipulation includes querying, adding, removing, sorting etc.

1. Reading values from array (or) Reading Array Elements

      toString()        It returns array elements separated with ","
      join()            It returns all array elements with custom delimeter.
      map()            It returns all array elements using an iterator.
      forEach()        It returns all array elements and their index references.
      find()            It returns the first occurance element that matches condition.
      filter()            It returns all elements that match condition.
      slice()            It returns elements between specified index.

    You can also use explicit techniques for reading and returning values from array.

      for..of            It is a statement that returns all elements.
      for..in            It is a statement that returns all properties.
      for                It is a loop that returns elements using counter, condition and
                    iterator.

Ex-1:
<script>
    var categories = ["All", "Electronics", "Fashion"];
    document.write(categories.toString() + "<br>");
    document.write(categories.join(" / ") + "<br>");
    document.write(categories.slice(1,2));
</script>

Ex-2:
<script>
    var categories = ["All", "Electronics", "Fashion"];
    categories.map(function(category){
        document.write(`<input type="checkbox"> <label>${category}</label><br>`);
    })
</script>

Ex-3:
<script>
    var categories = ["All", "Electronics", "Fashion"];
    categories.forEach(function(category,index){
        document.write(`[${index}]<input type="checkbox"> <label>${category}</label> <button>Delete</button> <br>`);
    })
</script>


Ex-4:

<script>
   var sales = [34000, 46700, 24500, 66700, 21000];
   var result =  sales.filter(function(value){
      return value<=40000;
   });
   document.write(result);
</script>

Ex-5:
<script>
   var sales = [34000, 46700, 24500, 66700, 21000];
   for(var property in sales)
   {
     document.write(`[${property}] ${sales[property]}<br>`);
   }
</script>

Ex-6:
<script>
   var sales = [34000, 46700, 24500, 66700, 21000];
   for(var value of  sales)
   {
     document.write(value + "<br>");
   }
</script>

Ex-7:
<script>
   var sales = [34000, 46700, 24500, 66700, 21000];
   for(var property in sales)
   {
     document.write(property + "<br>");
   }
</script>

Ex:
<script>
    var values = [[10, 20, 30], [40, 50, 60], [70, 80, 90]];      
    values.map(function(item){
        item.map(function(n){
            document.write(n + "&nbsp; &nbsp;")
        })
        document.write("<br>");
    })
</script>

Ex:
<script>
    var values = [[10, 20, 30], [40, 50, 60], [70, 80, 90]];      
    for(var item of values)
    {
        for(var n of item){
            document.write(n + "&nbsp; &nbsp;")
        }
        document.write("<br>");
    }
</script>

FAQ: How to present array elements into HTML document binding with HTML elements?
Ans : By creating HTML elements dynamically using iterators and appending into
     document.


FAQ: How to create an HTML element dynamically?
Ans: By using the method
        "document.createElement("p | div | option | li  | img | a");


FAQ: How to add elements into page?
Ans: By using the methods
        appendChild()
        append()


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function bodyload(){
            var pic = document.createElement("img");
            pic.src = "../public/images/a1.jpg";
            pic.width = "200";
            pic.height = "200";
            pic.border = "2";
            document.querySelector("div").appendChild(pic);
        }
    </script>
</head>
<body onload="bodyload()">
    <div>

    </div>
</body>
</html>


Class66- Date 13nov2023

=============================== Javascript Array Manipulations =============================

Array Manipulation
map()
- Creating Element dynamically and appending to page
        createElement()
        appendChild()

Ex: Create a table dynamically

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
       function GenerateClick(){
          var table = document.createElement("table");
          table.width= "100%";
          table.border = "1";

          var thead = document.createElement("thead");
          var tr = document.createElement("tr");
          var th1 = document.createElement("th");
          var th2 = document.createElement("th");
          th1.innerHTML = "Name";
          th2.innerHTML = "Price";

          tr.appendChild(th1);
          tr.appendChild(th2);

          thead.appendChild(tr);

          table.appendChild(thead);

          document.getElementById("container").appendChild(table);

       }
    </script>
</head>
<body>
    <button onclick="GenerateClick()">Generate Table</button>
    <br>
    <div id="container">

    </div>
</body>
</html>

Presenting Array Elements in UI:
- You have to read elements from array using any iterator or loop.
- For every element in array you have to create HTML element dynamically.
- Define properties for element.
- Append to its parent.
   
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        var categories = ["All", "Electronics", "Footwear", "Kid's Fashion"];
        function bodyload(){
            categories.map(function(category){
                var li = document.createElement("li");
                li.innerHTML = category;
                document.querySelector("ol").appendChild(li)

                var option = document.createElement("option");
                option.text = category.toUpperCase();
                option.value = category;
                document.querySelector("select").appendChild(option);

                var ul_li = document.createElement("li");
                var input = document.createElement("input");
                input.type =  "checkbox";
                var label = document.createElement("label");
                label.innerHTML = category;

                ul_li.appendChild(input);
                ul_li.appendChild(label);

                document.querySelector("ul").appendChild(ul_li);

            })
        }
    </script>
    <style>
        ul {
            list-style: none;
        }
    </style>
</head>
<body onload="bodyload()">
    <ol>

    </ol>
    <select></select>
    <ul>

    </ul>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        var categories = ["All", "Electronics", "Footwear", "Kid's Fashion"];
        function bodyload(){
            categories.map(function(category){
                var li = document.createElement("li");
                var a = document.createElement("a");
                a.href = `${category}.html`;
                a.innerHTML = category;
                li.appendChild(a);
                document.querySelector("ul").appendChild(li);
            })
        }
    </script>
    <style>
        ul {
            list-style: none;
        }
    </style>
</head>
<body onload="bodyload()">
   
    <ul>

    </ul>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        var categories = ["All", "Electronics", "Footwear", "Kid's"];
        function bodyload(){
            categories.map(function(category){
                var li = document.createElement("li");
                li.innerHTML = `<a href=${category}.html>${category}</a>`;
                document.querySelector("ul").appendChild(li);
            })
        }
    </script>
    <style>
        ul {
            list-style: none;
        }
    </style>
</head>
<body onload="bodyload()">
   
    <ul>

    </ul>
</body>
</html>


Ex: Table

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        var categories = ["All", "Electronics", "Footwear", "Kid's"];
        function bodyload(){
            categories.map(function(category){
                var tr = document.createElement("tr");
                var td = document.createElement("td");
                td.innerHTML = category;
                tr.appendChild(td);
                document.querySelector("tbody").appendChild(tr);
            })
        }
    </script>
    <style>
        ul {
            list-style: none;
        }
    </style>
</head>
<body onload="bodyload()">
    <table border="1" width="300">
        <thead>
            <tr>
                <th>Categories</th>
            </tr>
        </thead>
        <tbody>

        </tbody>
    </table>
</body>
</html>

Adding Elements into Array:

    push()        : It adds new element(s) as last element(s).
    unshift()        : It adds new element(s) as first element(s).
    splice()        : It adds new element(s) at specific position.

Syntax:
    arrayName.push("element1", "element2",...)
    arrayName.unshift("e1", "e2", ...)
    arrayName.splice(indexNumber, deleteCount, "element1", "element2", ...)

Ex:
    var categories = ["All", "Electronics"];
    categories.push("Men's");
        categories.splice(1,0,"Women");


Class67- Date 14nov2023

============================ javascript Array Manipulations =========================

Reading Array Elements
Add Elements into Array
    push()
    unshift()
    splice()
Removing Array Elements:

    pop()        : It removes and returns the last element.
    shift()        : It removes and returns first element.
    splice()        : It removes and returns specific element.

Syntax:
    arrayName.pop()
    arrayName.shift()
    arrayName.splice(startIndex, deleteCount)

Sorting Array Elements
   
    sort()        : It arranges elements in ascending order.
    reverse()        : It arranges elements in reverse order [bottom to top]


Syntax:
    arrayName.sort()
    arrayName.reverse()

Searching for Elements in Array:

    indexOf()        : It returns the index number of element. It not found then it returns
                  "-1". It returns the first occurance index number.

    lastIndexOf()    : It returns the last occurance index number.

    filter()        : It returns every occurance of the element based on condition.

    find()        : It returns the first occurance of element based on condition.

Ex: Array Manipulation

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Array Manipulation</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script type="text/javascript">
        var cities = ["Delhi", "Hyd"];
        function LoadCities(){
            document.getElementById("lstCities").innerHTML= "";
            document.getElementById("lblCount").innerHTML = `Total Number of Cities : ${cities.length}`;
            cities.map(function(city){
                 var option = document.createElement("option");
                 option.text = city;
                 option.value = city;
                 document.getElementById("lstCities").appendChild(option);
            })
        }
        function AddClick(){
            var cityName = document.getElementById("txtCity").value;
            if(cities.indexOf(cityName)==-1){
                cities.push(cityName);
                LoadCities();
                alert(`${cityName} added to list`);
                document.getElementById("txtCity").value = "";
            } else {
                alert(`${cityName} Exists`);
            }
        }
        function SortAsc(){
            cities.sort();
            LoadCities();
        }
        function SortDsc(){
            cities.sort();
            cities.reverse();
            LoadCities();
        }
        function RemoveCity(){
            var cityName = document.getElementById("lstCities").value;
            var cityIndex = cities.indexOf(cityName);
            var flag = confirm(`Are you sure?\nWant to delete ${cityName}`);
            if(flag==true){
                cities.splice(cityIndex,1);
                LoadCities();
            }
        }
        function RemoveAll(){
            var flag = confirm(`Are you sure? what to delete all?`);
            if(flag==true){
                cities.length = 0;
                LoadCities();
            }
        }
    </script>
</head>
<body class="container-fluid" onload="LoadCities()">
    <h2>Array Manipulation</h2>
    <div class="w-25">
        <div>
            <label class="form-label">Add City</label>
            <div class="input-group">
                <input type="text" id="txtCity" class="form-control" placeholder="New City Name"> <button onclick="AddClick()" class="btn btn-primary">Add</button>
            </div>
        </div>
        <div class="mt-4">
            <label class="form-label">Select City</label>
            <div class="mt-3 mb-3">
                <button onclick="SortAsc()" class="bi bi-sort-alpha-down btn btn-success"></button>
                <button onclick="SortDsc()" class="bi bi-sort-alpha-up btn btn-success"></button>
            </div>
            <div>
                <select class="form-select" size="3" id="lstCities">

                </select>
                <label class="form-label fw-bold" id="lblCount"></label>
            </div>
            <div>
                <button onclick="RemoveCity()" class="bi bi-trash-fill btn btn-danger"> Remove City</button>
                <button onclick="RemoveAll()" class="bi bi-trash btn btn-danger"> Clear All</button>
            </div>
        </div>
    </div>
</body>
</html>

Ex: Task

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        var appointments = [];
        function LoadTasks(){
            document.getElementById("lstTasks").innerHTML = "";
            appointments.map(function(item){
                var li = document.createElement("li");
                li.innerHTML  = item;
                document.getElementById("lstTasks").appendChild(li);
            })
        }
        function AddClick(){
            var title = document.getElementById("txtTitle").value;
            var date = document.getElementById("txtDate").value;
            var appointment = `${title} - ${date} <button onclick="DeleteClick()">Delete</button>`;
            appointments.push(appointment);
            alert(`Appointment Added to your To-DO list`);
            LoadTasks();
        }
        function DeleteClick(){
           
        }
    </script>
    <style>
        ul {
            list-style: none;
        }
        li {
            background-color: gray;
            color:white;
            padding: 5px;
            margin-bottom: 10px;
            width: 40%;
            display: flex;
            justify-content: space-between;
        }
    </style>
</head>
<body>
    <h3>TO-DO</h3>
    <div>
        <input id="txtTitle" type="text" placeholder="Your Appointment Title">
        <input type="date" id="txtDate">
        <button onclick="AddClick()">Add</button>
    </div>
    <div>
        <ul id="lstTasks">

        </ul>
    </div>
</body>
</html>



Class68- date 15nov2023

======================================= JavaScript Object Type =======================================

- In early 1960's  "Alan Kay" introduced the concept of object into computer programming.
- An object is used to keep all related data and logic together.
- Object is a "key and value" collection.
- Key is string type and Value can be any type, primitive or non-primitive.
- If object represents only "Data" then it is reffered as "JSON" [JavaScript Object Notation].
        * JSON format is light weight
        * JSON is cross platform
        * It is easy to transport in network.
        * It is not blocked by firewall.
        * It is not infected with virus.
        * It can reach low bandwidth devices like smart watch, mobile etc.

Syntax:
    var  product  = { "Key": value,  "Key": value };

- Every object is a static type, you can access the members of object within object by using "this" keyword and outside by using object reference.

Syntax:
        product.Key            [dot  is  member invoking operator]
        product[Key]

Ex:
<script>
     var tv = {
        "Name": "Samsung TV",
        "Price": 45000.44,
        "Stock": true,
        "Cities": ["Delhi", "Hyd"],
        "Rating": {"Rate":4.3, "Count":6000}
     };
     document.write(`${tv.Name} ${tv["Price"]} <br> ${tv.Cities.join(" / ")} <br> ${tv.Rating.Rate} [${tv.Rating["Count"]}] `);
</script>

- You can configure a JSON file to store data offline. So that it saves round trips.
- JSON file have extention ".json"
- JSON is strictly typed, with object or array of objects.

   
                      JavaScript "Fetch" promise
                      ------------------------------------
- JavaScript window object provides "fetch()" promise, which is used to fetch data from a file or remote URL.
- Promise is a function with "Async" technique. [ AJAX ]

Syntax:
      fetch("path").then(function(){}).catch(function(){}).finally(function(){})

      then()    => executes on success.
      catch()    => executes on failure
      finally()    => executes always

Ex:
1. Add a new folder "data"

2. Add a new file
        product.json

{
    "Title": "APPLE iPhone 14 (Blue, 128 GB)",
    "Price": 58999,
    "Features": [
        "128 GB ROM",
        "15.49 cm (6.1 inch) Super Retina XDR Display",
        "12MP + 12MP | 12MP Front Camera",
        "A15 Bionic Chip, 6 Core Processor Processor",
        "1 Year Warranty for Phone and 6 Months Warranty for In-Box Accessories"
    ],
    "Rating": {"Rate":4.6, "Count": 284670, "Reviews": 8556},
    "Photo":  "../public/images/iphoneblue.jpg"
}

3. Add HTML page

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script type="text/javascript">
        function bodyload(){
            fetch("../data/product.json")
            .then(function(response){
                return response.json();
            })
            .then(function(product){
                 document.getElementById("imgProduct").src = product.Photo;
                 document.getElementById("lblTitle").innerHTML = product.Title;
                 document.getElementById("lblRating").innerHTML = product.Rating.Rate;
                 document.getElementById("lblPrice").innerHTML = product.Price.toLocaleString('en-in',{style: 'currency', currency:'INR'});
                 product.Features.map(function(feature){
                     var li = document.createElement("li");
                     li.innerHTML = feature;
                     document.getElementById("lstFeatures").appendChild(li);
                 })
            })
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <div class="row mt-4">
        <div class="col-2">
            <img id="imgProduct" width="300">
        </div>
        <div class="col-6 ps-4">
            <h2 id="lblTitle" class="text-primary"></h2>
            <div>
                <span id="lblRating"></span> <span class="bi bi-star-fill text-success"></span>
            </div>
            <div>
                <ul id="lstFeatures">

                </ul>
            </div>
        </div>
        <div class="col-4">
            <h2 id="lblPrice"></h2>
        </div>
    </div>
</body>
</html>

Class69- Date 16nov2023

============================ JSON Type - Object Manipulations ============================

Summary
- What is an object?
- Key Value collection
- JSON
- Fetch Promise

                        Object Manipulation

1. How to read all keys from object?
A. By using Object.keys() method.
    By using "for..in" iterator.

Ex: for..in

<script>
     fetch("../data/product.json")
     .then(function(response){
        return response.json();
     })
     .then(function(product){
         for(var property in product){
            document.write(property + "<br>");
         }
     })
</script>

Ex: Object.keys()

<script>
     fetch("../data/product.json")
     .then(function(response){
        return response.json();
     })
     .then(function(product){
         Object.keys(product).map(function(key){
            document.write(key + "<br>");
         })
     })
</script>

2. How to know the data type of value in a key?
A. By using "typeof" operator

Ex:
<script>
     fetch("../data/product.json")
     .then(function(response){
        return response.json();
     })
     .then(function(product){
         Object.keys(product).map(function(key){
            document.write(`${key} [${typeof product[key]}]<br>`);
         })
     })
</script>


3. How to get the count of keys in object?
A. By Object.keys(object).length


4. How to read both keys and values?
A. By using "for..in"  or Object.keys()

Ex:
<script>
     fetch("../data/product.json")
     .then(function(response){
        return response.json();
     })
     .then(function(product){
        Object.keys(product).map(function(key){
            document.write(`${key}: ${product[key]}<br>`);
        })
     })
</script>


5. How to remove a key dynamically?
A. By using JavaScript "delete" operator.

Syntax:
        delete   objectName.key


6. How to check the availability of a Key in object?
A. By using JavaScript "in" operator.
   
    "Key"  in  object    => true if exists


Ex:
<script>
     fetch("../data/product.json")
     .then(function(response){
        return response.json();
     })
     .then(function(product){
          if("Stock" in product) {
              document.write("Stock : " + product.Stock);
          } else {
              document.write("Product Stock Details : Not Available");
          }
     })
</script>

                        Object with functions

- An object can keep all related data and functionality together.
- Functionality defines the actions of object.
- Functionality is defined by using javascript function.
- It can be a void function or a function with specific return type.

Syntax:
     var obj = {
           Key : value,
           Key : function() { },                => void
           Key : function() { return value }        => with return
        }

Ex:
<script>
    var product = {
        "Name": "Nike Casuals",
        "Price": 34000.33,
        "Qty": 1,
        "Total": function(){
            return this.Qty * this.Price
        },
    }
    product.Price = parseFloat(prompt("Enter Product Price"));
    product.Qty = parseInt(prompt("Enter Quantity"));
    document.write(`
        Name : ${product.Name} <br>
        Price: ${product.Price} <br>
        Qty : ${product.Qty} <br>
        Total: ${product.Total().toLocaleString("en-in",{style:'currency', currency:'INR'})}
    `);
</script>

Ex:
<script>
    var product = {
        "Name": "Nike Casuals",
        "Price": 34000.33,
        "Qty": 1,
        "Total": function(){
            return this.Qty * this.Price
        },
        "Print": function(){
            document.write(`
            Name : ${this.Name} <br>
            Price: ${this.Price} <br>
            Qty : ${this.Qty} <br>
            Total: ${this.Total().toLocaleString("en-in",{style:'currency', currency:'INR'})}
        `);
        }
    }
    product.Price = parseFloat(prompt("Enter Product Price"));
    product.Qty = parseInt(prompt("Enter Quantity"));
    product.Print();
</script>

Note: Object is often known as "Pseudo Class".


                        Array of Objects
- JavaScript represents data with collection of objects as array of objects.
- It is a technique used to represent multiple records in a data source and manipulate them dynamically.

Data in Source:
    Name    Price        Stock
    -------------------------------------------
    TV        20000.33        true
    Mobile    12000.33        false

JSON: Products
    [
      {  Name : "TV",  Price: 20000.33,  Stock: true },        [0]
      {  Name : "Mobile", Price: 12000.33, Stock:false }    [1]
    ]

    Mobile Price : products[1].Price


Ex:
products.json

[
    {
        "Title": "APPLE iPhone 14 (Blue, 128 GB)",
        "Price": 58999,
        "Features": [
            "128 GB ROM",
            "15.49 cm (6.1 inch) Super Retina XDR Display",
            "12MP + 12MP | 12MP Front Camera",
            "A15 Bionic Chip, 6 Core Processor Processor",
            "1 Year Warranty for Phone and 6 Months Warranty for In-Box Accessories"
        ],
        "Rating": {"Rate":4.6, "Count": 284670, "Reviews": 8556},
        "Photo":  "../public/images/iphoneblue.jpg"
    },
    {
        "Title": "APPLE iPhone 14 (Starlight, 128 GB)",
        "Price": 58999,
        "Features": [
            "128 GB ROM",
            "15.49 cm (6.1 inch) Super Retina XDR Display",
            "12MP + 12MP | 12MP Front Camera",
            "A15 Bionic Chip, 6 Core Processor Processor",
            "1 Year Warranty for Phone and 6 Months Warranty for In-Box Accessories"
        ],
        "Rating": {"Rate":4.6, "Count": 284670, "Reviews": 8556},
        "Photo":  "../public/images/iphonestarlight.jpg"
    }
]


home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function bodyload(){
             fetch("../data/products.json")
             .then(function(response){
                return response.json();
             })
             .then(function(products){
                 products.map(function(product){
                     var tr = document.createElement("tr");
                     var tdTitle = document.createElement("td");
                     var tdPrice = document.createElement("td");
                     var tdPhoto = document.createElement("td");

                     tdTitle.innerHTML = product.Title;
                     tdPrice.innerHTML = product.Price;
                     tdPhoto.innerHTML = `<img width="200" height="200" src=${product.Photo}>`;

                     tr.appendChild(tdTitle);
                     tr.appendChild(tdPhoto);
                     tr.appendChild(tdPrice);

                     document.querySelector("tbody").appendChild(tr);
                 })
             })
        }
    </script>
</head>
<body onload="bodyload()">
    <table width="100%" border="1" frame="void" cellpadding="10" cellspacing="10">
        <thead>
            <tr>
                <th>Title</th>
                <th>Preview</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>

        </tbody>
    </table>
</body>
</html>

Class70- Date 17nov2023

============================= Nasa API ===========================


- Array
- Object
- Object Manipulations
- Array of Object

                             Data from API
- API is Application Programming Interface.
- Its purpose is to make data available to any device and platform.
- API have various communication specifications
    a) SOAP
    b) REST
    c) JSON
- SOAP
    Service Oriented Architecture Protocol
    Consumer [Client] sends XML request and Provider [Server] sends XML response.

- REST
    Representational State Transfer
    Consumer sends Query Request and Provider sends XML response.
        [Optionally JSON response]

- JSON
    JavaScript Object Notation
    Consumer sends JSON request and Provider sends JSON response.

Ex: Nasa API  [api.nasa.gov]

     Mars Rover Photos:

     https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY

nasa.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nasa API</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script type="text/javascript">
        function bodyload(){
            fetch("https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY&quot;)
            .then(function(response){
                return response.json();
            })
            .then(function(mars){
                mars.photos.map(function(item){
                     var tr = document.createElement("tr");
                     var tdId = document.createElement("td");
                     var tdPhoto = document.createElement("td");
                     var tdCamera = document.createElement("td");
                     var tdRover = document.createElement("td");

                     tdId.innerHTML = item.id;
                     tdPhoto.innerHTML = `<a href=${item.img_src} target="_blank"><img src=${item.img_src} width="200" height="200"></a>`;
                     tdCamera.innerHTML = item.camera.full_name;
                     tdRover.innerHTML = item.rover.name;

                     tr.appendChild(tdId);
                     tr.appendChild(tdPhoto);
                     tr.appendChild(tdCamera);
                     tr.appendChild(tdRover);

                     document.querySelector("tbody").appendChild(tr);
                })
            })
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <h2>Mars Rover Photos</h2>
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Photo Id</th>
                <th>Preview</th>
                <th>Camera Name</th>
                <th>Rover Name</th>
            </tr>
        </thead>
        <tbody>

        </tbody>
    </table>
</body>
</html>

Ex: Nasa-Cards

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nasa Cards</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script type="text/javascript">
        function bodyload(){
            fetch("https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY&quot;)
            .then(function(res){
                return res.json();
            })
            .then(function(mars){
                mars.photos.map(function(item){
                    var div = document.createElement("div");
                    div.className = "card m-2 p-2";
                    div.style.width = "250px";
                    div.innerHTML = `
                        <img src=${item.img_src} class="card-img-top" height="150">
                        <div class="card-header" style="height:200px">
                           <dl>
                              <dt>Camera</dt>
                              <dd class="bi bi-camera-fill"> ${item.camera.full_name}</dd>
                              <dt>Rover</dt>
                              <dd>${item.rover.name}</dd>
                           </dl>
                        </div>
                    `;
                    document.querySelector("main").appendChild(div);
                })
            })
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <main class="d-flex flex-wrap">

    </main>
</body>
</html>

Ex:  http://fakestoreapi.com


Class71- Date 18nov2023

================================= Fakestore API =================================

- It provides data for ERP. [Enterprise Resource Planning]
- It provides various request methods for accessing data related to online shopping.

                       https://fakestoreapi.com

Method        Path                                Data
--------------------------------------------------------------------------------------------------------------
GET            /products                        [ ] of products, every product is { }
GET            /products/1                    { } single product matching specified Id
GET            /products/categories            [ ] of all categories string type.
GET            /products/category/electronics    [ ] of products belong to specified
                                            category.

Product Data:
    - id                [number]
    - title            [string]
    - price            [number]
    - description        [string]
    - category        [string]
    - image            [string]
    - rating            [object] { rate:number, count:number }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fakestore | Shopping</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <style>
        a {
            text-decoration: none;
            color:white;
        }
    </style>
    <script type="text/javascript">

        function LoadCategories(){
            fetch("https://fakestoreapi.com/products/categories&quot;)
            .then(function(res){
                return res.json();
            })
            .then(function(categories){
                 categories.unshift("all");
                 categories.map(function(category){
                      var option = document.createElement("option");
                      option.text = category.toUpperCase();
                      option.value = category;
                      document.getElementById("lstCategories").appendChild(option);
                 })
            })
        }

        function LoadProducts(url){
            document.querySelector("main").innerHTML = "";
            fetch(url)
            .then(function(res){
                return res.json();
            })
            .then(function(products){
                 products.map(function(product){
                     var div = document.createElement("div");
                     div.className = "card m-2 p-2";
                     div.style.width = "200px";
                     div.innerHTML = `
                       <img src=${product.image} class="card-img-top" height="150">
                       <div class="card-header" style="height:80px; overflow:auto">
                          ${product.title}
                       </div>
                       <div class="card-body">
                         <dl>
                            <dt>Price</dt>
                            <dd>${product.price}</dd>
                            <dt>Rating</dt>
                            <dd>${product.rating.rate} <span class="bi bi-star-fill text-sucess"></span> [${product.rating.count}] </dd>
                         </dl>
                       </div>
                       <div class="card-footer">
                         <button class="btn btn-dark w-100">
                            <span class="bi bi-cart4"></span> Add to Cart
                         </button>
                       </div>
                     `;
                     document.querySelector("main").appendChild(div);
                 })
            })
        }
        var cartItems = [];
        function GetCartItemsCount(){
            document.getElementById("lblCount").innerHTML = cartItems.length;
        }

        function bodyload(){
            LoadCategories();
            LoadProducts("https://fakestoreapi.com/products&quot;);
            GetCartItemsCount();
        }

        function CategoryChanged()
        {
            var categoryName = document.getElementById("lstCategories").value;
            if(categoryName=="all"){
                LoadProducts("https://fakestoreapi.com/products&quot;);
            } else {
                LoadProducts(`https://fakestoreapi.com/products/category/${categoryName}`);
            }
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <header class="d-flex justify-content-between p-3 bg-dark text-white">
        <div class="h3">Fakestore</div>
        <nav class="fs-4">
            <a href="javascript:LoadProducts('https://fakestoreapi.com/products')&quot; class="me-3"><span>Home</span></a>
            <a href="javascript:LoadProducts('https://fakestoreapi.com/products/category/electronics')&quot; class="me-3"><span>Electronics</span></a>
            <a class="me-3"><span>Jewelery</span></a>
            <a class="me-3"><span>Men's Fashion</span></a>
            <a class="me-3"><span>Women's Fashion</span></a>
        </nav>
        <div class="fs-4">
            <button class="btn position-relative btn-warning bi bi-cart2"> Your Cart <span id="lblCount" class="badge rounded rounded-circle bg-danger text-white position-absolute"></span> </button>
        </div>
    </header>
    <article class="bg-dark text-white p-2 mt-0 text-center">
        <span class="bi bi-lightning-fill text-warning"></span>
        <span>HOLIDAY DEALS 50% OFF - LIMITED OFFER</span>
        <span class="bi bi-lightning-fill text-warning"></span>
    </article>
    <section class="mt-3 row">
        <nav class="col-2">
            <div>
                <label class="form-label fw-bold">Select Category</label>
                <div>
                    <select class="form-select" onchange="CategoryChanged()" id="lstCategories"></select>
                </div>
            </div>
        </nav>
        <main class="col-10 d-flex flex-wrap"  style="height: 450px; overflow: auto;">

        </main>
    </section>

    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</body>
</html>


Class72- 20nov2023

============================== javascripts Map and Symbol type ============================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fakestore | Shopping</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <style>
        a {
            text-decoration: none;
            color:white;
        }
    </style>
    <script type="text/javascript">

        function LoadCategories(){
            fetch("https://fakestoreapi.com/products/categories&quot;)
            .then(function(res){
                return res.json();
            })
            .then(function(categories){
                 categories.unshift("all");
                 categories.map(function(category){
                      var option = document.createElement("option");
                      option.text = category.toUpperCase();
                      option.value = category;
                      document.getElementById("lstCategories").appendChild(option);
                 })
            })
        }

        function LoadProducts(url){
            document.querySelector("main").innerHTML = "";
            fetch(url)
            .then(function(res){
                return res.json();
            })
            .then(function(products){
                 products.map(function(product){
                     var div = document.createElement("div");
                     div.className = "card m-2 p-2";
                     div.style.width = "200px";
                     div.innerHTML = `
                       <img src=${product.image} class="card-img-top" height="150">
                       <div class="card-header" style="height:80px; overflow:auto">
                          ${product.title}
                       </div>
                       <div class="card-body">
                         <dl>
                            <dt>Price</dt>
                            <dd>${product.price}</dd>
                            <dt>Rating</dt>
                            <dd>${product.rating.rate} <span class="bi bi-star-fill text-sucess"></span> [${product.rating.count}] </dd>
                         </dl>
                       </div>
                       <div class="card-footer">
                         <button  onclick="AddToCartClick(${product.id})" class="btn btn-dark w-100">
                            <span class="bi bi-cart4"></span> Add to Cart
                         </button>
                       </div>
                     `;
                     document.querySelector("main").appendChild(div);
                 })
            })
        }
        var cartItems = [];
        function GetCartItemsCount(){
            document.getElementById("lblCount").innerHTML = cartItems.length;
        }

        function bodyload(){
            LoadCategories();
            LoadProducts("https://fakestoreapi.com/products&quot;);
            GetCartItemsCount();
        }

        function CategoryChanged()
        {
            var categoryName = document.getElementById("lstCategories").value;
            if(categoryName=="all"){
                LoadProducts("https://fakestoreapi.com/products&quot;);
            } else {
                LoadProducts(`https://fakestoreapi.com/products/category/${categoryName}`);
            }
        }

        function AddToCartClick(id){
            fetch(`https://fakestoreapi.com/products/${id}`)
            .then(function(res){
                return res.json();
            })
            .then(function(product){
                cartItems.push(product);
                alert(`${product.title}\nAdded to Cart`);
                GetCartItemsCount();
            })
        }
        function ShowCartClick(){
            document.getElementById("cartBody").innerHTML = "";
            cartItems.map(function(item){
                var tr = document.createElement("tr");
                var tdTitle = document.createElement("td");
                var tdPrice = document.createElement("td");
                var tdPreview = document.createElement("td");

                tdTitle.innerHTML = item.title;
                tdPrice.innerHTML = item.price;
                tdPreview.innerHTML = `<img src=${item.image} width="50" height="50">`;

                tr.appendChild(tdTitle);
                tr.appendChild(tdPrice);
                tr.appendChild(tdPreview);

                document.getElementById("cartBody").appendChild(tr);
            })
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <header class="d-flex justify-content-between p-3 bg-dark text-white">
        <div class="h3">Fakestore</div>
        <nav class="fs-4">
            <a href="javascript:LoadProducts('https://fakestoreapi.com/products')&quot; class="me-3"><span>Home</span></a>
            <a href="javascript:LoadProducts('https://fakestoreapi.com/products/category/electronics')&quot; class="me-3"><span>Electronics</span></a>
            <a class="me-3"><span>Jewelery</span></a>
            <a class="me-3"><span>Men's Fashion</span></a>
            <a class="me-3"><span>Women's Fashion</span></a>
        </nav>
        <div class="fs-4">
            <button data-bs-target="#cart" data-bs-toggle="modal" onclick="ShowCartClick()" class="btn position-relative btn-warning bi bi-cart2"> Your Cart <span id="lblCount" class="badge rounded rounded-circle bg-danger text-white position-absolute"></span> </button>
            <div class="modal fade" id="cart">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h2 class="text-warning">Your Cart</h2>
                            <button class="btn btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Title</th>
                                        <th>Price</th>
                                        <th>Preview</th>
                                    </tr>
                                </thead>
                                <tbody id="cartBody">
                                   
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <article class="bg-dark text-white p-2 mt-0 text-center">
        <span class="bi bi-lightning-fill text-warning"></span>
        <span>HOLIDAY DEALS 50% OFF - LIMITED OFFER</span>
        <span class="bi bi-lightning-fill text-warning"></span>
    </article>
    <section class="mt-3 row">
        <nav class="col-2">
            <div>
                <label class="form-label fw-bold">Select Category</label>
                <div>
                    <select class="form-select" onchange="CategoryChanged()" id="lstCategories"></select>
                </div>
            </div>
        </nav>
        <main class="col-10 d-flex flex-wrap"  style="height: 450px; overflow: auto;">

        </main>
    </section>

    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</body>
</html>


Summary
- Non Primitive Types
- Array
- Object
- Array of Objects
- Fetch()
- Nasa API
- Fakestore API

                              Map Type

- Map is similar to object with a Key and Value collection.
- Key in map can be a string, number, boolean etc.
- It provides all implicit methods and properties for manipulation.
- It is faster when compared to object.
- However it is schema less [structure less].

Syntax:
    var  ref  = new Map();
   
    .set()        It can add a new key with value
    .get()        It can read value from a key
    .has()        It returns true if specified key exists in map.
    .size            It returns the total count of keys
    .keys()        It returns all keys
    .values()        It returns all values
    .entries()        It returns all keys and values
    .delete()        It removes specified key and value
    .clear()        It removes all keys and values

Ex:
<script>
     var topics = new Map();
     topics.set("HTML", "It is a markup language");
     topics.set(1, "JavaScript");
     topics.set("Cities", ["Delhi", "Hyd"]);

     document.write(topics.get("Cities"));
     document.write("<br>");
     for(var item of topics.entries()){
        document.write(item + "<br>");
     }
     document.write(`Total Count of Keys : ${topics.size}`);
</script>

FAQ: What is "Symbol" type in JavaScript?
Ans:  It is used for unique identification of any element in object.
     Symbol configures a hidden key, which is individually used but ignored over iterations.
     It is primitive data type of JavaScript.

Syntax:
    1. Configure a symbol
       
        var  Id  = Symbol();

    2. Define Key with symbol type

        {
          [Id] : value
        }

    3. Access the key individually.

        object[Id]

Ex:
<script>
     var Id = Symbol();
     var product = {
         [Id] : 101,
         Name: "Samsung TV",
         Price: 35000.33,
         Stock: true
     }
     for(var key in product){
        document.write(key + "<br>");
     }
     document.write(`Product with ${product[Id]} is ready to dispatch`);
</script>


Class73- 21nov2023

============================== javascript Date and Time Function ============================

FAQ: What is difference between object and map ?
Ans:
      Object                    Map
    -------------------------------------------------------
    Keys are string            	Keys are any type
    Structured                	Schema less
    Slow                    	Fast
    Explicit Manipulations      Implict methods
    No size attribute           Size attribute for counting keys



                          Date Type
- Javascript provides a Date() object, which can handle both date and time values.

Syntax:
    var departure = new Date();        load and store current date & time
    var departure = new Date("YY-MM-DD  Hrs:Min:Sec:MilliSec");

Ex:
<script>
     var departure = new Date("2023-11-27 18:32:25.68");
     document.write(`Departure : ${departure}`);
</script>

- Javascript provides various methods to read date and time

        getHours()                Hours number 0 to 23
        getMinutes()                0 to 59
        getSeconds()                0 to 59
        getMilliSeconds()            0 to 99
        getDate()                    1 to 28, 29, 30, 31
        getDay()                    Weekday number  0=Sunday
        getMonth()                Month number  0=January
        getFullYear()                Year number
        toLocaleDateString()
        toLocaleTimeString()

Syntax:
    var now = new Date();
    now.getHours();
    now.toLocaleDateString();

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Date Demo</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script type="text/javascript">

        function LoadDateTime(){
            var now = new Date();
            var weekdays = ["Sunday", "Monday", "Tuesday", "Wed","Thu","Fri","Saturday"];
            var months = ["Jan","Feb","March","Apri","May","June","July","Aug","Sep","Oct","November", "December"];

            document.getElementById("clock").innerHTML = now.toLocaleTimeString();
            document.getElementById("cal").innerHTML = ` ${now.getDate()} ${weekdays[now.getDay()]} , ${months[now.getMonth()]} ${now.getFullYear()}`
        }

        function LoadMessage(){
            var now = new Date();
            var hrs = now.getHours();
            var msg = document.getElementById("msg");
            var gifImg = document.getElementById("gifImg");

            if(hrs>=0 && hrs<=12) {
                msg.innerHTML = " Good Morning ! ";
                gifImg.src = "../public/images/morning.gif";
            }
            else if(hrs>12 && hrs<=17) {
                msg.innerHTML = " Good Afternoon ! ";
            } else {
                msg.innerHTML = " Good Evening ! ";
            }
        }

        function bodyload(){
            LoadDateTime();
            LoadMessage();
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <nav class="d-flex justify-content-between p-2 bg-dark text-white">
        <div class="h3">
            Shopper.
        </div>
        <div>
            <span class="me-4">Home</span>
            <span class="me-4">About</span>
            <span class="me-4">Contact</span>
        </div>
        <div>
            <span class="bi bi-calendar me-2" id="cal"> </span>
            <span class="bi bi-clock" id="clock"> </span>
        </div>
    </nav>
    <article class="p-1 text-center mt-3">
        <img id="gifImg" width="50" height="50">  <span id="msg"></span>
    </article>
</body>
</html>


- Javascript provides various methods to change the date and time dynamically

        setHours()
        setMinutes()
        setSeconds()
        setDate()
        setMonth()
        setFullYear()

Syntax:
    var now = new Date();
    now.setHours(14);
    now.setDate(22);

                       
                        JavaScript Timer Events

setTimeout()
clearTimeout()
setInterval()
clearInterval()

FAQ: What is debouncing ?
Ans : Bouncing is a technique in electronic devices where a function is released immediately without locking in memory.
     Debounce allows to lock the function in memory for a specific duration, so that
     we can allow other tasks to perform in process.

FAQ: How to control bouncing?
Ans: By using setTimeout() event. It can make the task sleep for specific duration
    You can use clearTimeout() to remove the task from memory.

Syntax:
    setTimeout(function(){  }, interval)
    clearTimeout(refName)

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">

        function Msg1(){
            document.querySelector("h1").innerHTML = "Hello !";
        }

        function Msg2(){
            document.querySelector("h1").innerHTML = "How are you?";
        }

        function Msg3(){
            document.querySelector("h1").innerHTML = "Welcome to JavaScript !";
        }
       
       
        var m1, m2, m3;
        function bodyload(){
           m1 =  setTimeout(Msg1, 3000);
           m2 =  setTimeout(Msg2, 5000);
           m3 =  setTimeout(Msg3, 10000);
        }
        function CancelClick(){
            clearTimeout(m2);
        }
    </script>
</head>
<body onload="bodyload()">
    <div>
        <button onclick="CancelClick()">Cancel Msg2</button>
    </div>
    <h1 align="center"></h1>
   
</body>
</html>

Class73- Date 22nov2023

====================== JavaScript setInterval Examples =====================

Date and Time functions
- get()
- set()

Timer Events
- setTimeout()
- clearTimeout()


                            setInterval()
- It loads specified task into memory and release into process at regular intervals.
- It repeats the task until removed from memory.

Syntax:
    setInterval(function(){ }, timeInterval)

- You can remove the task from memory using "clearInterval()".

Syntax:
    clearInterval(refName);

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function LoadTime(){
            var now = new Date();
            var time = now.toLocaleTimeString();
            document.querySelector("p").innerHTML = time;
        }
        var timer;
        function bodyload(){
           timer =  setInterval(LoadTime, 1000);
        }
        function StopClick(){
            clearInterval(timer);
        }
        function StartClick(){
            bodyload();
        }
    </script>
</head>
<body onload="bodyload()">
    <div align="center">
        <button onclick="StartClick()">Start</button>
        <button onclick="StopClick()">Stop</button>
    </div>
    <p align="center"></p>
</body>
</html>

Ex: Progress

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interval</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        progress {
            width: 300px;
            height: 30px;
        }
        @keyframes ZoomIn
        {
            from {
                width: 5px;
                height: 5px;
                transform: rotate(0deg);
            }
            to {
                width: 300px;
                height: 400px;
                transform: rotate(360deg);
            }
        }
    </style>
    <script>
        var count = 1;
        function ProgressBarAnimation(){
            count++;
            document.getElementById("Progress").value = count;
            document.getElementById("status").innerHTML = `${count} % Loaded`;
            var img = document.querySelector("img");

            if(count==100){
                document.getElementById("imageContainer").style.display = "block";
                img.style.animationName = "ZoomIn";
                img.style.animationDuration = "4s";
                document.getElementById("progressContainer").style.display = "none";
            }
        }

        var timer;
        function LoadClick(){
            document.getElementById("progressContainer").style.display = "block";
            document.getElementById("buttonContainer").style.display = "none";
            timer = setInterval(ProgressBarAnimation,100);
        }
        function PauseClick(){
            clearInterval(timer);
            document.getElementById("status").innerHTML=`${count} % Paused`;
        }
        function PlayClick(){
            timer = setInterval(ProgressBarAnimation,100);
        }
    </script>
</head>
<body class="container-fluid d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="text-center">
        <div id="buttonContainer">
            <button class="btn btn-primary" onclick="LoadClick()">Load Image</button>
        </div>
        <div id="progressContainer" style="display: none;">
            <progress min="1" max="100" value="1" id="Progress"></progress>
            <p>
                <button onclick="PauseClick()" class="bi bi-pause btn btn-danger"></button>
                <button onclick="PlayClick()" class="bi bi-play btn btn-primary"></button>
            </p>
            <p id="status"></p>
        </div>
        <div id="imageContainer" style="display: none;">
            <img src="../public/images/women-fashion.jpg" width="300" height="400">
        </div>
    </div>
</body>
</html>

Summary Data Types
- Primitive
    number
    string
    boolean
    null
    undefined
    bigint
    symbol
- Non Primitive
    array
    object
    map
- Date


                        Operators in JavaScript

Class75- Date 24nov2023

============================== JavaScript Timer Events and Operators ==================================

Timer Events
- setTimeout()
- clearTimeout()
- setInterval()
- clearInterval()

                        JavaScript Operators

- Operator is an object that evaluates a value using any expression.

            x + y

- Based on the number of operands the operators are classified into following types

            a) Unary
            b) Binary
            c) Ternary

- Unary operators handle operation of single operand.

            ++    Increment
            --    Decrement
            !    NOT

Syntax:
    x = 10;
    y = x++;            =>   x=11, y=10    

        Post Increment will assign first and later increments.

    x = 10;
    y = ++x;            => x = 11,  y = 11

    Pre Increment will increment the value first and later assigns.

Syntax: Decrement

    x = 10;
    y = x--;            x = 9,  y=10
    y = --x;            x = 9,  y= 9

Ex: Previous and Next Buttons

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Slide Show</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script type="text/javascript">
        function LoadProduct(id){
            fetch(`https://fakestoreapi.com/products/${id}`)
            .then(function(res){
                return res.json();
            })
            .then(function(product){
                document.getElementById("lblTitle").innerHTML = product.title;
                document.getElementById("imgProduct").src = product.image;
                document.getElementById("lblPrice").innerHTML = "$" + product.price;
            })
        }
        function bodyload(){
            LoadProduct(1);
        }
        var productId = 1;
        function NextClick(){
            productId++;
            LoadProduct(productId);
        }
        function PreviousClick(){
            productId--;
            LoadProduct(productId);
        }
    </script>
    <style>
        #lblPrice {
            background-color: red;
            color:white;
            padding: 5px;
            width: 90px;
            border-radius: 20px;
            position: absolute;
            right: 10px;
            top: 10px;
        }
    </style>
</head>
<body onload="bodyload()" class="container-fluid d-flex justify-content-center">
    <div class="card p-2 mt-4 w-50">
        <div class="card-header text-center">
            <div id="lblTitle"></div>
        </div>
        <div class="card-body p-4 position-relative">
            <div class="bi bi-tag-fill" id="lblPrice"></div>
            <img width="100%" height="300" id="imgProduct">
        </div>
        <div class="card-footer text-center">
            <button onclick="PreviousClick()" class="btn btn-primary bi bi-chevron-left"></button>
            <button onclick="NextClick()" class="btn btn-primary bi bi-chevron-right"></button>
        </div>
    </div>
</body>
</html>

Ex: Auto  - Play and Pause

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Slide Show</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script type="text/javascript">
        var count = 0;
        function LoadProduct(){
            count++;
            fetch(`https://fakestoreapi.com/products/${count}`)
            .then(function(res){
                return res.json();
            })
            .then(function(product){
                document.getElementById("lblTitle").innerHTML = product.title;
                document.getElementById("imgProduct").src = product.image;
                document.getElementById("lblPrice").innerHTML = "$" + product.price;
            })
        }
        function bodyload(){
            LoadProduct();
        }
        var timer;
        function PlayClick(){
            timer = setInterval(LoadProduct, 5000);
            document.getElementById("lblStatus").innerHTML= "Slide Show - Started";
        }
        function PauseClick(){
            clearInterval(timer);
            document.getElementById("lblStatus").innerHTML= "Slide Show - Paused";
        }
       
    </script>
    <style>
        #lblPrice {
            background-color: red;
            color:white;
            padding: 5px;
            width: 90px;
            border-radius: 20px;
            position: absolute;
            right: 10px;
            top: 10px;
        }
    </style>
</head>
<body onload="bodyload()" class="container-fluid d-flex justify-content-center">
    <div class="card p-2 mt-4 w-50">
        <div class="card-header text-center">
            <div id="lblTitle"></div>
            <div id="lblStatus" class="fw-bold"></div>
        </div>
        <div class="card-body p-4 position-relative">
            <div class="bi bi-tag-fill" id="lblPrice"></div>
            <img width="100%" height="300" id="imgProduct">
        </div>
        <div class="card-footer text-center">
            <button onclick="PlayClick()" class="btn btn-primary bi bi-play"></button>
            <button onclick="PauseClick()" class="btn btn-danger bi bi-pause"></button>
        </div>
    </div>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Slide Show</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script type="text/javascript">
       
        function LoadProduct(id){
            fetch(`https://fakestoreapi.com/products/${id}`)
            .then(function(res){
                return res.json();
            })
            .then(function(product){
                document.getElementById("lblTitle").innerHTML = product.title;
                document.getElementById("imgProduct").src = product.image;
                document.getElementById("lblPrice").innerHTML = "$" + product.price;
            })
        }
        function bodyload(){
            LoadProduct(1);
        }
        function ChangeImage(){
            LoadProduct(document.getElementById("slider").value);
        }
    </script>
    <style>
        #lblPrice {
            background-color: red;
            color:white;
            padding: 5px;
            width: 90px;
            border-radius: 20px;
            position: absolute;
            right: 10px;
            top: 10px;
        }
    </style>
</head>
<body onload="bodyload()" class="container-fluid d-flex justify-content-center">
    <div class="card p-2 mt-4 w-50">
        <div class="card-header text-center">
            <div id="lblTitle"></div>
            <div id="lblStatus" class="fw-bold"></div>
        </div>
        <div class="card-body p-4 position-relative">
            <div class="bi bi-tag-fill" id="lblPrice"></div>
            <img width="100%" height="300" id="imgProduct">
        </div>
        <div class="card-footer text-center">
           <input type="range" onchange="ChangeImage()" class="form-range" min="1" max="20" value="1" id="slider">
        </div>
    </div>
</body>
</html>

- Binary operators perform operations on 2 operands
            X + Y
            X / Y
- Ternary operator perform operations of 3 operands.
       
            ? :
   
    (condition) ? true  : false


Class76- Date 25nov2023

================================ javascript Operators ==============================

- Based on the type of value an operator returns, they are further classified into following types.

1. Arithematic Operators
    +                    Addition
    -                    Subtraction
    *                    Multiplication
    /                    Division
    %                    Modulus
    ** [Math.pow()]        Power
    ++                    Increment
    --                    Decrement


2. Comparision Operators
    ==            Equal
    ===            Identical Equal
    !=            Not Equal
    !==            Not Identical
    >            Greater than
    >=            Greater than or Equal
    <            Less than
    <=            Less than or Equal

Syntax:
    10 == "10"        => true
    10 === "10"        => false
    10 === 10        => true
    "10" === "10"        => true

FAQ: What is difference between "==" & "===" ?
Ans:   == equal can compare different types of values.
      === identical equal can compare only same type of values.


3. Assignment Operators

    +=            Add and assign
    -=
    *=
    /=
    %=
   
Syntax:
    var cost = 100;
    var addOn = 30;
   
    var cost = cost + addOn;    
    cost+=addOn;

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        var position = 0;
        function MoveRight(){
            position += 100;
            document.querySelector("img").style.marginLeft = position + "px";
        }
        function MoveLeft(){
            position -= 100;
            document.querySelector("img").style.marginLeft = position + "px";
        }
    </script>
</head>
<body>
    <button onclick="MoveRight()">Move Right</button>
    <button onclick="MoveLeft()">Move Left</button>
    <br><br>
    <img src="../public/images/a1.jpg" width="200" height="200">
</body>
</html>

Ex: KFC Form

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KFC Online - Order</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script type="text/javascript">
        function PlaceOrderClick(){
            document.getElementById("lblName").innerHTML = document.getElementById("txtName").value;
            document.getElementById("lblMobile").innerHTML = document.getElementById("txtMobile").value;

            var mealName = "";
            var mealCost = 0;

            var adOnName = "";
            var adOnCost = 0;

            var imgMeal = document.getElementById("imgMeal");

            //Radios
            var optBurger = document.getElementById("optBurger");
            var optRoller = document.getElementById("optRoller");

            if(optBurger.checked) {
                mealName = optBurger.value;
                mealCost = 120;
                imgMeal.src = "../public/images/omg1.png";
            }

            if(optRoller.checked) {
                mealName = optRoller.value;
                mealCost = 100;
                imgMeal.src = "../public/images/omg2.png";
            }

            //Checkbox
            var optWings = document.getElementById("optWings");
            var optKrusher = document.getElementById("optKrusher");

            if(optWings.checked){
                adOnName += optWings.value + "<br>";
                adOnCost = 80;
                mealCost+=adOnCost;
            }

            if(optKrusher.checked) {
                adOnName += optKrusher.value + "<br>";
                adOnCost = 40;
                mealCost+=adOnCost;
            }

            document.getElementById("lblMeal").innerHTML = mealName;
            document.getElementById("lblAdOn").innerHTML = adOnName;
            document.getElementById("lblTotal").innerHTML = mealCost.toLocaleString('en-in',{style:'currency', currency:'INR'});

        }
    </script>
</head>
<body class="container-fluid bg-danger text-white">
    <header>
        <img src="../public/images/kfctop.PNG" width="100%" height="200">
    </header>
    <section>
        <div class="accordion" id="kfc">
            <!--Customer Details-->
            <div class="accordion-item">
                <div class="accordion-header">
                    <button data-bs-target="#customer" data-bs-toggle="collapse" class="btn btn-danger w-100">Customer Details</button>
                </div>
                <div class="accordion-collapse p-2 collapse" id="customer" data-bs-parent="#kfc">
                    <div class="accordion-body">
                        <dl>
                            <dt>Customer Name</dt>
                            <dd><input type="text" id="txtName" class="form-control"></dd>
                            <dt>Mobile Number</dt>
                            <dd><input type="text" id="txtMobile" class="form-control"></dd>
                        </dl>
                    </div>
                </div>
            </div>
          <!-- Meal Details -->
          <div class="accordion-item">
             <div class="accordion-header">
                <button data-bs-target="#meal" data-bs-toggle="collapse" class="btn btn-danger w-100">Select Your Meal</button>
             </div>
             <div class="accordion-collapse collapse" id="meal" data-bs-parent="#kfc">
                <div class="accordion-body p-2">
                    <div class="row">
                        <div class="col text-center">
                            <img src="../public/images/omg1.PNG" width="50%">
                            <div class="mt-2 h3">
                                <input type="radio" name="meal" value="OMG Burger" id="optBurger" class="form-check-input"> <span>OMG Burger &#8377; 120/-</span>
                            </div>
                        </div>
                        <div class="col text-center">
                            <img src="../public/images/omg2.PNG" width="50%">
                            <div class="mt-2 h3">
                                <input type="radio" name="meal" value="OMG Roller" id="optRoller" class="form-check-input"> <span>OMG Roller &#8377; 100/-</span>
                            </div>
                        </div>
                    </div>
                </div>
             </div>
          </div>

          <!--Add On's-->
          <div class="accordion-item">
             <div class="accordion-header">
                <button data-bs-target="#adon" data-bs-toggle="collapse" class="btn btn-danger w-100">Select AD-ON's</button>
             </div>
             <div class="accordion-collapse collapse" id="adon" data-bs-parent="#kfc">
                <div class="accordion-body p-2">
                    <div class="row">
                        <div class="col text-center">
                            <img src="../public/images/wings.PNG" width="50%">
                            <div class="mt-2 h3">
                                <input type="checkbox" class="form-check-input" id="optWings" value="Hot Wings"> <span>Hot Wings &#8377; 80/-</span>
                            </div>
                        </div>
                        <div class="col text-center">
                            <img src="../public/images/krusher1.PNG" width="50%">
                            <div class="mt-2 h3">
                                <input type="checkbox" class="form-check-input" id="optKrusher" value="Krusher Brownie"> <span>Kruhser Brownie &#8377; 40/-</span>
                            </div>
                        </div>
                    </div>
                </div>
             </div>
          </div>
        </div>
        <button onclick="PlaceOrderClick()" data-bs-target="#bill" data-bs-toggle="modal" class="btn btn-danger w-100">Place Order</button>
        <div class="modal fade" id="bill">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="text-danger">Your Bill Summary</h2>
                        <button class="btn btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body text-dark">
                        <div class="row">
                            <div class="col">
                                <dl>
                                    <dt>Customer Name</dt>
                                    <dd id="lblName"></dd>
                                    <dt>Mobile</dt>
                                    <dd id="lblMobile"></dd>
                                    <dt>Meal</dt>
                                    <dd id="lblMeal"></dd>
                                    <dt>AdOn's</dt>
                                    <dd id="lblAdOn"></dd>
                                    <dt>Total</dt>
                                    <dd id="lblTotal"></dd>
                                </dl>
                            </div>
                            <div class="col">
                                <img id="imgMeal" width="100%">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</body>
</html>


Class77- Date 27nov2023

========================== Operators (Part-2) in Javascript 27nov2023 ===========================
Operators
- Arithematic
- Assignment
- Comparision

Task: Hotel Registration Form
- Design using bootstrap nav with tabs.


Logical Operators

&&        AND
||        OR
!        Not

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Login</title>
    <script>
        function LoginClick(){
            var userid = document.getElementById("UserId").value;
            var password = document.getElementById("Password").value;
            fetch("../data/users.json")
            .then(function(res){
                return res.json();
            })    
            .then(function(users){
                  users.map(function(user){
                       if(user.UserId===userid && user.Password===password){
                           document.write("Login Success..");
                       } else {
                           document.getElementById("msg").innerHTML = "Invalid User Id / Password".fontcolor('red');
                       }
                  })
            })
        }
    </script>
</head>
<body>
    <dl>
        <h2>User Login</h2>
        <dt>UserId</dt>
        <dd><input type="text" id="UserId"></dd>
        <dt>Password</dt>
        <dd><input type="password" id="Password"></dd>
    </dl>
    <button onclick="LoginClick()">Login</button>
    <p id="msg"></p>
</body>
</html>

                          Special Operators

1. Ternary  [ ?: ]
     
    (condition)?true:false

2. typeof        : It returns the data type of value stored in a reference.

Syntax:
    var x = 10;
    document.write(typeof x);    // number

3. instanceof    : It returns true if the given object is derived from specified class.

Ex:
<script>
    class Employee
    {

    }
    var products = new Array();
    var emp = new Employee();

    document.write(`Emp is derived from Array ? ${emp instanceof Array} <br>`);
    document.write(`Emp is derived from Employee? ${emp instanceof Employee}`);
</script>
   

4. delete        :  It is used to delete a key / property from object.
               You can't delete properties of built in objects.
                All built-in properties are readonly in access.

Syntax:
         delete  object.key

Ex:
<script>
    var product = {
        Name : "TV",
        Price: 45000.44
    }
    delete product.Price;
    delete Math.PI;
    document.write(`Name=${product.Name}<br>Price=${product.Price} <br> PI=${Math.PI}`);
</script>

5. in     :  It is a boolean operator that returns true, if the given property is available
           in specified object.

Syntax:
    var product = {
        Name : "TV",
    }

    document.write("Price" in product);        // false

6. new    : It is dynamic memory allocation operator.

Syntax:
        var  collection = new Array();
        var  topics = new Map();
       

7. void    : It is used to discard the return of any function or element.


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <!-- To be implemented -->
    <a href="javascript:void('')">Home</a>
</body>
</html>

Class78- Date 28nov2023

=========================== JavaScript	Statements ============================
	
Special Operators in JavaScript

- Ternary Operator ?:
- typeof
- instanceof
- delete
- in
- new
- void

                            yield
- It is used to return the result of an generator function.

Syntax:
    function* Generator()
    {
       yield  value;
    }

                        JavaScript Statements

- In computer programming statements are used to control the execution flow.
- Statements are classified into various groups

    1. Selection Statements
        if, else, switch, case, default
		
    2. Looping Control Statements
        for, while, do while
		
    3. Iteration Statements
        for..in, for..of
		
    4. Jump Statements
        break, return, continue
		
    5. Exception Handling Statements
        try, catch, throw, finally

Looping Control Statements
- Looping is the process of executing a set of statements repeatedly based on given condition.

- Loop can be created using : for, while & do while.
- Every loop requires initialization, condition and counter.

        initialization    => where to start
        condition        => when to stop
        counter        => how to move [ next / pervious / step ]

For Loop:
- It is looping control statement used by developers when they are sure about the number of iterations and the iteration counter will not change dynamically.

Syntax:
    for(initialization; condition; counter)
    {
       // statements;
    }

    Initialization    => It is required to define where to start and remember how many
                     times the loop executed.
                     Ex:
                    var i = 1
   
    Condition        => It is a boolean expression that checks the value and compares
                     with the desired condition, loop executes based on condition.

                     A loop stops when condition evaluates to false.
                    Ex:
                    i < = 10
   

    Counter        =>  It configures the step value to move the looping counter
                      next or previous.
                     Ex:
                    i++
                    i--
                    i = i + 5
                    i = i - 5

Ex:
    for(var i=1;  i<=5  ; i++)
    {
         console.log("Hello !");
    }

Ex:
     for(var i=1; i<=10; i++)
     {
     console.log(i);
     }

Ex:
    var i = 1;
    for( ; i<=10; i++)
    {
       console.log(i);
    }

Note: for statement requires memory for initialization, condition and counter. But it can be configured outside the parenthesis "( )".

Ex: Multiplication Table

<script>
    var n = parseInt(prompt("Enter a Number"));
    for(var i=1; i<=10; i++){
        document.write(`${n} X ${i} = ${n*i} <br>`);
    }
</script>

Q: How to print the given pattern?

    *
    *   *
    *   *    *
    *   *    *    *
    *   *    *    *    *

Q: Write a program to print factorial of given number.

    var n = parseInt(prompt("Enter number"));
     5
               5 x 4 x 3 x 2 x 1 = 120


Ex:
<script>
   var categories = ["All", "Electronics", "Footwear", "Fashion"];
   for(var i=0; i<categories.length; i++){
      document.write(`${i+1}. ${categories[i]}<br>`);
   }
</script>


Class79- Date 29nov2023

=========================== javaScript Loops ==========================

Looping Control
- for loop
    a) Initialization
    b) Condition
    c) Counter

Ex: Nested Loop

<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Document</title>
   <script>
      var menuItems = [
         {Category: "Electronics", Products:["TV","Mobile", "Watch"]},
         {Category: "Fashion", Products: ["Kid's", "Women", "Men's"]}
      ];
      function bodyload(){
         for(var i=0; i<menuItems.length; i++)
         {
              var olLi = document.createElement("li");
              olLi.innerHTML = menuItems[i].Category;
              for(var j=0; j<menuItems[i].Products.length; j++)
              {
                  var ul = document.createElement("ul");
                  var ulLi = document.createElement("li");
                  ulLi.innerHTML = menuItems[i].Products[j];
                  ul.appendChild(ulLi);
                  olLi.appendChild(ul);
                  document.querySelector("ol").appendChild(olLi);
              }
         }
      }
   </script>
</head>
<body onload="bodyload()">
   <ol></ol>
</body>
</html>

Ex:
<script>
     var n = parseInt(prompt("Enter Number"));

     for(var i=1; i<=n; i++) {
        for(var j=1; j<=i; j++) {
            document.write( "*"  + "&nbsp; &nbsp;");
        }
        document.write("<br>");
     }
</script>

                             While Loop
- It is used for collections when developer is not sure about the number of iterations and iteration counter may change dynamically.
- It will use initialization, condition and counter.
- It will start loop only when condition evaluates to true.

Syntax:
    initialization;
    while(condition)
    {
       statements;
       counter;
    }
Ex:
<script>
     var i = 5;
     while(i<=10)
     {
        document.write(i + "<br>");
        i++;
     }
</script>

Ex:
<script>
     
     var i = 1;
     while(i<=3)
     {
        var n = parseInt(prompt("Enter an Even Number"));
        if(n % 2 == 0)
        {
            document.write("Success..");
            break;
        }
        else {
            alert(`Not an Even Number - ${3-i} attempts left`);
        }
        i++;
     }
</script>

Note: You need jump statement with in looping control to exit the loop based on specified condition. [break, return]

                         do while
- While and do-while are similar.
- But do-while ensures that the statement will execute at least once even when the condition is false.

Syntax:
    do
    {
      statements;
      counter;
    } while(condition);

Ex:
<script>
   var i = 15;
   do
   {
     document.write(i + "<br>");
     i++;
   }while(i<=10);
</script>

Class80- Date 01dec2023

======================= Iteration, Jump and Exception Handling =====================

Loops
    - for
    - while
    - do while
Iterations
    - for..in
    - for..of

 Iteration is a software design pattern, which is used to read elements from a collection in sequential order.

Syntax:
    for(var property in collection)            => It reads all properties
    {
    }

    for(var value of collection)            => It reads all values
    {
    }

Iteration doesn't require initialization, condition and counter.

Ex:
<script>
   var categories = ["All", "Electronics", "Fashion"];
   // Loop
   for(var i=0; i<categories.length; i++)
   {
      document.write(categories[i] + "<br>");
   }

   // Iteration
   for(var value of categories)
   {
      document.write(value  + "<br>");
   }
</script>

FAQ: How an iterator works?
Ans:  It uses a function Generator.
     A function generator have implicit methods to read and return values from a
     collection.

                         Jump Statements
- break
- return
- continue

- break terminates the current block, but stays in function.
- return terminates the block and compilation. [It exits the function].
- continue skips the counter that matches given condition.

Ex:
<script>
   fetch("http://fakestoreapi.com/products&quot;)
   .then(function(res){
     return res.json();
   })
   .then(function(products){
       for(var product of products){
           if(product.category==="electronics" || product.category==="women's clothing"){
               continue;
           }
           document.write(`${product.title} - <b> <font color='red'> ${product.category} </font> </b> <br>`);      
        }
   })
</script>


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <script type="text/javascript">
      function VerifyUserId(){
          var userid = document.getElementById("UserId").value;
          var lblError = document.getElementById("lblError");
          fetch("../data/users.json")
          .then(function(res){
            return res.json();
          })
          .then(function(users){
              for(var user of users)
              {
                   if(user.UserId===userid){
                      lblError.innerHTML = "User Id Taken - Try Another".fontcolor('red');
                      return;
                   } else {
                      lblError.innerHTML = "User ID Available".fontcolor('green');
                   }
              }
          })
      }
  </script>
</head>
<body>
   <dl>
    <h3>Register User</h3>
    <dt>User Id</dt>
    <dd><input type="text" id="UserId" onkeyup="VerifyUserId()"></dd>
    <dd id="lblError"></dd>
   </dl>
</body>
</html>

FAQ: When an unreachable code is configured and how it is configured?
Ans: If the code is not implemented and need to implement then we can stop the compiler by using "return", so that it can't reach the code which is not implemented.
   
Syntax:
    function f1()
    {
      statement-1;
      break;            => invalid
      statement-2;
    }

    function f1()
    {
     statement-1;
     return;            => valid
     statement-2;
    }


                        Exception Handling Statements
                    ------------------------------------------
- The errors in computer programming are classified into 2 types
    a) Compile time errors
    b) Runtime errors

- Compile time errors will occur when a compiler is unable to understand the keywords, syntax and blocks in your code. If a compile time error occurs then it stops the compilation and can't start your application.

- Runtime errors will occur at the time of using application. A program compiles and executes successfully. However it may terminate abnormally when compiler is unable to understand and process your instructions at runtime.

- Hence exception handling is required to avoid abnormal termination.

- Exception handling is configured using

    a) try            : monitioring block, contains statements to execute.
    b) catch          : handler block, can catch the exception thrown.
    c) throw          : throw is used to throw exception explicitly.
    d) finally        : It is a block that executes always.

Syntax:
    try
    {
     statements to execute
     throw "exception";
    }
    catch(exception)
    {    
      report exception;
    }
    finally
    {
      statements to execute always;
    }

Ex:
<script>
    try
    {
        var a = parseInt(prompt("Enter A"));
        var b = parseInt(prompt("Enter B"));
        if(b==0){
            throw "Can't Divide By Zero";
        }
        if(b>a){
            throw "Can't divide by larger number";
        }
        var c = a / b;
        document.write(`Division=${c}<br>`);
    }
    catch(error)
    {
        document.write(error + "<br>");
    }
    finally
    {
        document.write("End to Program");
    }
</script>


Class82- Date 03dec2023

===================== JavaScript Function Parameters ======================

Functions
- Function Expression
- Function Declaration
- Function Definition
- Function Parameters

                           Rest Parameters
                           -----------------------
- JavaScript E5+ version introduced rest parameter.
- A rest parameter is single parameter in function, which can handle multiple arguments.
- It is defined by using "..." operator.

Syntax:
        function  Name(...param)
        {
        }

        Name(arg1, arg2, arg3,...);

- Rest parameter is an array type parameter

        ...param[]     =>  [0]=arg1,  [1]=arg2,  [2]=arg3

- Every function can have only one rest parameter.

        function Name(...param1, ...param2)  => invalid
        {
        }

- You can define other parameters along with rest parameter.

- But rest parameter must be last parameter in formal list.

Note: Rest parameter reads arguments upto end, hence it must be the last parameter
      in a list.

Ex:
<script>
    function Product(title, ...details)
    {
        var [id, name, price, stock] = details;
        document.write(`
            <h3>${title}</h3>
            Id=${id} <br>
            Name=${name} <br>
            Price=${price}<br>
            Stock=${stock}
        `);
    }
    Product( "Product Details" , 1, "TV", 30000.44, true);
</script>


                        Spread Operation
                        ------------------------

- Spread is the process of expanding one argument into multiple parameters.
- Spreading one argument values into multiple parameters.

Syntax:
        function  Name(param1, param2, param3)
        {

        }

        var values = [val1, val2, val3];

        Name(...values);

        param1 = values[0]
        param2 = values[1]
        param3 = values[3]

Ex:
<script>
    function Product(id, name, price, stock)
    {
        document.write(`
            Id=${id} <br>
            Name=${name} <br>
            Price=${price}<br>
            Stock=${stock}
        `);
    }
    Product(...[1, "TV", 45000.44, true]);
</script>

Ex:
<script>
    var one = ["A", "B"];
    var val = "C";
    console.log([...one, val]);        => ["A", "B", "C"]        [array]
    console.log([one, val]);        => [ ["A","B"], "C"]        [array]
    console.log(...one, val);        => A B C              [string]
    console.log(one, val);            => ["A", "B"], "C"        [array and string]
</script>

Ex: Concat Arrays

<script>
    var one = ["A", "B"];
    var two = ["C", "D"];
    var result1 = one.concat(two);
    var result2 = [...one, ...two];
    console.log(result1);
    console.log(result2);
</script>


Ex: Copy Array

<script>
    var one = ["A", "B"];
    var two = [...one];
   
    console.log(one);
    console.log(two);
</script>

FAQ: What is difference between rest and spread?
Ans:  "Rest" is about formal parameters.   [defined in function declaration]
     "Spread" is about actual arguments. [defined in function call]

     
                       Function with Return
                       ----------------------------
- A function uses "return" to terminate the function before it disposes the memory.
- So that function memory is available to store values of a function.
- It can perform specified functionality and store the results.

Syntax:
    function Name()
    {
      return value;
    }

    Name = value;


Ex:
<script>
   function Addition(a, b){
      return a + b;
   }
   function Result(){
      document.write(`Addition=${Addition(30,50)}`);
   }
   Result();
</script>


Class84- Date 05dec2023

========================== Functions Callback, Promise and Arrow =======================

Function Parameters
Function Return
Function Recursion
Function Generator
Function Closure


                        Function Callback
                     -------------------------
					 
- Callback is a technique of configuring functions, which execute according to state and situation.
- Callback uses Synchronous mechanism, which blocks the other actions while performing the specified.

Syntax:
    function Name(callback1, callback2)
    {
    }

    Name(function(){ }, function(){ });

Ex:
<script>
     function FetchData(url, success, failure)
     {
          if(url==="http://fakestoreapi.com&quot;){
             success();
          }
          else {
             failure();
          }
     }
     FetchData(
      prompt("Enter API Url"),
      function(){
         document.write("Data Fetched Successfully...");
      },
      function(){
         document.write("404 Error: Invalid URL");
      }
      )
</script>

Ex:
<script>
     function FetchData(url, success, failure)
     {
          if(url==="http://fakestoreapi.com&quot;){
             success({StatusText: "Success : Data Fetched", StatusCode:200, Data:["All","Electronics","Footwear","Fashion"]});
          }
          else {
             failure("404 Error: Invalid URL");
          }
     }
     FetchData(
      prompt("Enter API Url"),
      function(response){
          document.write(`<h2>${response.StatusCode} : ${response.StatusText}</h2>`);
          response.Data.map(function(item){
             document.write(`<li>${item}</li>`);
          })
      },
      function(error){
         document.write(error);
      }
      )
</script>

                        Function Promise
                        ------------------------
-  A promise is just like a real life promises that you make.
-  It have 3 phases
    a) Initial            Not yet started, Ready to Start
    b) Resolve        Successfully completed
    c) Reject            Unable to fullfill the promise
- JavaScript promise is "Asynchronous", it can execute the task without blocking other tasks in process.
- Promises are better in performance when compare to callbacks.

Syntax:

    var  ref = new Promise(function(resolve, reject){
        if(condition)
        {
          resolve("response");
        } else {
          reject("error");
        }
    })

    ref.then(function(response){}).catch(function(error){}).finally(function(always){})

Ex:
<script>
     var FetchData = new Promise(function(resolve, reject){
          var url = prompt("Enter API URL");
          if(url=="http://fakestoreapi.com&quot;){
              resolve({StatusText:"Success - Data Fetched", Data:["All","Electronics","Fashion"]});
          } else {
              reject("Error: Unable to Fetch Data");
          }
     })

     FetchData.then(function(response){
         document.write(`<h2>${response.StatusText}</h2>`);
         for(var item of response.Data){
            document.write(`<li>${item}</li>`);
         }
     })
     .catch(function(error){
         document.write(error);
     })
</script>

                        Arrow Functions
                        ----------------------
- Arrow is a short hand technique used for writing function expression.
- You can used for expression or callbacks.

Syntax: Default expression

    var  hello = function() {  
         return "Hello JavaScript";    
     };

Syntax: Arrow expression

    var hello = () => "Hello JavaScript";


    ()        function
    =>        return
    =>{ }        definition

Ex:
<script>
   var hello = () => "Hello ! JavaScript";
   document.write(hello());    
</script>

Syntax:
    var hello = function(userName) {
       document.write(`Hello ! ${userName}`);
    }

ShortHand:

    var hello = userName => document.write(`Hello ! ${userName}`);
   
    var hello = (userName, Age) => document.write(`${userName}<br>${Age}`);

    var add = (a, b) => a + b;
    document.write(add(10, 20));

Ex:
<script>
    fetch("http://fakestoreapi.com/products/categories&quot;)
    .then(response => response.json())
    .then(categories => {
        categories.map(category=> {
           document.write(`<li>${category}</li>`);
        })
    })
</script>



Ex:
<script>
  /* var FetchData = new Promise(function(resolve, reject){
        var url = prompt("Enter API URL");
        if(url=="http://fakestoreapi.com&quot;){
            resolve({StatusText:"Success - Data Fetched", Data:["All","Electronics","Fashion"]});
        } else {
            reject("Error: Unable to Fetch Data");
        }
   })

   FetchData.then(function(response){
       document.write(`<h2>${response.StatusText}</h2>`);
       for(var item of response.Data){
          document.write(`<li>${item}</li>`);
       }
   })
   .catch(function(error){
       document.write(error);
   })
   */

   var FetchData = new Promise((resolve, reject)=>{
       var url = prompt("Enter URL");
       if(url=="fakestore"){
         resolve("Success - Data Fetched");
       } else {
         reject("Error - Unable to Fetch Data");
       }
   })

   FetchData
   .then(response=> document.write(response))
   .catch(error => document.write(error))



</script>


Class85- Date 06dec2023

========================== JavaScript OOP =======================


Functions in JavaScript
- Callbacks
- Promise
- Closure
- Return
- Parameters
- Rest
- Spread

                              JavaScript OOP
- JavaScript is not an OOP language.
- It supports few features of OOP.
- In real world development various programming architectures are used

    a) POPS
    b) OBPS
    c) OOPS

POPS
- Process Oriented Programming System
- It supports low level features.
- It can directly interact with hardware services.
- It uses less memory.
- It is faster.

Ex: C, Pascal etc..
       
- No dynamic memory
- Hard to extend
- Reusability issues

OBPS
- Object Based Programming System
- It supports dynamic memory
- Can extend
- Can allow reusability
- Less memory but legacy

Ex: Visual Basic, JavaScript

- No dynamic polymorphism
- Extensibility issues
- Code level security issues

OOPS
- Object Oriented Programming System
- Resuability
- Extensibility
- Code Security
- Dynamic Polymorphism

Ex: C++, Java, C#

- It is heavy
- It uses more memory
- It can't directly interact with hardware
- It is slow

Evolution of OOP
- "Alan Kay" introduced concept of Object in early 1960's
- "Johan Oley, Kristian Nygaard" developed OOP. [1967]
- Introduced code reusability.
- SIMULA is the first OOP language.
- In early 1970's "Trygve" introduced code separation.
- Trygve developed MVC architecture [Model-View-Controller]
- 1970's  C++
- 1990's  Java
- 2003    C#

                          JavaScript Modules
- A module comprises of data and logic.
- Application is built by using a set of modules.
- Module enables code resuability and extensibility.
- JavaScript requires a special module system to use modules.
- There are various Javascript module systems

        a) Common JS
        b) Require JS
        c) UMD [Universal Module Distribution]
        d) AMS [Asynchronous Module Distribution]
        e) ES Module

Creating a JS Module:
- Every JavaScript file is technically a module.
- Hence to create a module you have to add a "JS" file into project

                index.js

- The file name is used as module name. [Index module]
- Every JS module comprises of
        a) Classes
        b) Functions
        c) Variables

Syntax:
            index.js
       
        var name="John";

        function Hello(){
            return `Hello ! ${name}`;
        }

- The members of module are by default private in access.
- To access outside module scope we have to mark them as "export".

        export function Hello() { }
        export name;

- You can import and use in any page.

        <script type="module">
           
                import  { Hello }  from  "../home.js";
   
        </script>

- Every module can have one default export.
- A default export loads and unload automantically.
- It doesn't require a block to configure start and stop.

    export default function Hello() { }

    import  Hello  from  "home.js";        => valid

    import { Hello } from "home.js" ;        => invalid

Ex:
1. Add new folders into project

        Library => Modules

2. Add a new file  "home.js" into modules folder

var title = "Fashion Store | Home";

export function PrintTitle(){
    return title;
}

export default function PrintSubTitle(){
    return "<b>Shop Online - Kids, Men, Women Fashion - 50% OFF</b>";
}

3. Add a new HTML page and import modules

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="module">
        import PrintSubTitle, { PrintTitle } from "../library/modules/home.js";
        document.querySelector("h1").innerHTML = PrintTitle();
        document.querySelector("p").innerHTML = PrintSubTitle();
    </script>
</head>
<body>
    <h1 align="center"></h1>
    <p></p>
</body>
</html>

Class86- Date 07dec2023

========================== Classes in JavaScript =======================

Various Programming Arch

		- POPS
		- OBPS
		- OOPS
		
Features of OOP
Drawbacks of OOP
Evolution of OOP

		SIMULA
		SMALL Talk [Trygve]
		C++, Java, C# etc..
		
Modules in OOP

		- Code Reusability    
		- Code Separation
		- Easy Extensibility
		
Export module members
Default Export
Import function from module
Various Module System

		- Common JS
		- Require JS
		- UMD
		- AMD
		- ESModule

                              Class in OOP
- Class is a program template that provides data and logic, which you can implement and customize according to requriements.
- Class have the behavior of Entity when it comprises of business related interactions.
- Class have the behavior of Model when it comprises of data related interactions.
- Class is used as a blue print to customize and create multiple copies according to the requirements.


Configuring a class in JavaScript:

a) Declaration

        class   Name
        {

        }

b) Expression

        var  Name = class {

        }


Class Members:
- JavaScript classes support only following members

    a) Property
    b) Method
    c) Accessor
    d) Constructor

FAQ: Can we define a variable as class member?
Ans : No. But you can have a variable in class as a member of any method.

FAQ: Why variable can't be a class member?
Ans : It is immutable and class can have only mutable members.


                         Property in Class

- A property in class is used to store data.
- It is mutable, which can change according to state and situation.

Syntax:
        class  Name
        {
            PropertyName = Value;
        }

- A property can handle any type of data
       
        a) Primtive
        b) Non Primitive
        c) Date

- You have to create an instance for class in order to access the class members.

Syntax:
        class Product
        {
            Name;
            Price;
        }

        let  tv = new Product();
        tv.Name = "Samsung TV";

Ex:
<script>
    class Product
    {
        Name = "";
        Price = 0;
        Stock = false;
        Cities = [];
        Rating = {Rate:0, Count:0}
    }
    let tv = new Product();
    tv.Name = prompt("Enter Name");
    tv.Price = parseFloat(prompt("Enter Price"));
    tv.Stock = (prompt("Enter Stock Status", "true|false")==="true"?true:false);
    for(var i=0; i<2; i++){
        tv.Cities[i] = prompt(`Enter City-${i+1}`);
    }
    tv.Rating.Rate = parseInt(prompt("Enter Rating"));
    tv.Rating.Count = parseInt(prompt("Enter Rating Count"));

    console.log(JSON.stringify(tv));
</script>


                              Accessors
- Accessors are used to configure fine grained control over properties.
- Accessor can manage read and write operations on a property.
- Every property comprises of 2 accessors
   
        a) get()            Getter
        b) set()            Setter

- Getter is used to read and return the value defined in property.
- Setter is used to store a new value into property.

Syntax:
        Property;
   
        get  AliasName()
        {
           return  this.Property;
        }

        set  AliasName(newValue)
        {
          this.Property = newValue;
        }

Ex:
<script>
    var userName = prompt("Enter Your Name");
    var userRole = prompt("Enter Your Role", "admin|customer");
    var productname = prompt("Enter New Name for Product");
    class Product
    {
        _productName;
        get ProductName()
        {
            return this._productName;
        }
        set ProductName(newName)
        {
            if(userRole==="admin")
            {
                this._productName = newName;
            }
            else
            {
                document.write(`Hello ! ${userName} you are not authorized to set product name`);
            }
        }
    }
    let tv = new Product();
    tv.ProductName = productname;
    if(tv.ProductName)
    {
        document.write(`Product Name : ${tv.ProductName}`);
    }
</script>


Class86- Date 08dec2023

======================= Class Methods and Constructor ===================

Modules
Class
Class Members
    - Property
    - Accessor    

- Accessor is also used to set an alias name for property in class to access from a multi level hierarchy.

- If accessor is defined with only "get()" then, it is considered as read-only.


Ex:
<script>
    class Product
    {
        Name = "Samsung TV";
        Price = 45000.44;
        Rating = {
            Vendor: {
                Bajaj : {Rate:4.3, Count:56},
                Reliance: {Rate:4.5, Count:30}
            },
            Customer: {
                Rate:4.2, Count:4000
            }
        }
        get RelianceRating(){
            return this.Rating.Vendor.Reliance.Rate;
        }
        set RelianceRating(newRating){
            this.Rating.Vendor.Reliance.Rate = newRating;
        }
    }
    let tv = new Product();
    tv.RelianceRating = prompt("Enter Reliance Rating");
    document.write(`Name=${tv.Name}<br>Reliance Vendor Rating: ${tv.RelianceRating}`);
</script>

                             Method
- A method configures the actions to perform.
- It is mutable.
- A JavaScript method can be void or return a value.

Syntax:
    class  Name
    {
           MethodName()
           {
           }
       }


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        class Database
        {
            DatabaseName = "";

            Insert(){
                return `Connected to ${this.DatabaseName} - Record Inserted`;
            }

            Update(){
                return `Connected to ${this.DatabaseName} - Record Updated`;
            }

            Delete(){
                return `Connected to ${this.DatabaseName} - Record Deleted`;
            }
        }
        function DatabaseAction(action){
            var msg;
            var dbName = document.querySelector("select").value;
            switch(action)
            {
                case "Insert":
                let obj1 = new Database();
                obj1.DatabaseName = dbName;
                msg = obj1.Insert();
                break;
                case "Update":
                let obj2 = new Database();
                obj2.DatabaseName = dbName;
                msg = obj2.Update();
                break;
                case "Delete":
                let obj3 = new Database();
                obj3.DatabaseName = dbName;
                msg = obj3.Delete();
                break;
            }
            document.querySelector("p").innerHTML = msg;
        }
    </script>
</head>
<body>
    <fieldset>
        <legend>Connect with Database</legend>
        <dl>
            <dt>Select Database</dt>
            <dd>
                <select>
                    <option>Select Database</option>
                    <option>Oracle</option>
                    <option>MySql</option>
                    <option>MongoDB</option>
                </select>
            </dd>
            <dt>Select Action</dt>
            <dd>
                <button onclick="DatabaseAction('Insert')">Insert</button>
                <button onclick="DatabaseAction('Update')">Update</button>
                <button onclick="DatabaseAction('Delete')">Delete</button>
            </dd>
        </dl>
    </fieldset>
    <p align="center"></p>
</body>
</html>

Ex:
<script>
    class Product
    {
        Name = "";
        Price = 0;
        Qty = 0;
        Total(){
            return this.Qty * this.Price;
        }
        Print(){
            document.write(`Name=${this.Name}<br>Price=${this.Price}<br>Qty=${this.Qty}<br>Total=${this.Total()}`);
        }
    }
    var obj = new Product();
    obj.Name = prompt("Enter Name");
    obj.Price = parseFloat(prompt("Enter Price"));
    obj.Qty = parseInt(prompt("Enter Qty"));
    obj.Print();
</script>

                               Constructor

- Constructor is a software design pattern used for instantiation.
- Instantiation is the process of creating a object for class, allocting memory and loading class members into memory.
- Technically a constructor is used to create an object for class.
- Every class have a default constructor.
- Constructor is a special type of "sub routine" [method], which executes automatically for every object.
- JavaScript constructor is anonymous. [no-name]

Syntax:
    class Database
    {
       constructor() {  }
    }

- JavaScript constructor can't overload and can't have any access modifiers.
   [public, private, protected..]

- Constructor can be parameterized.
- If a constructor is parameterized then the parameters are passed while allocating memory for class.

    var obj = new ClassName(paramValue);

    class  ClassName
    {
       constructor(param)
       {
       }
        }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        class Database
        {
           constructor(dbName){
             document.write(`Connected to ${dbName} Database<br>`);
           }
           Insert(){
             document.write("Record Inserted");
           }
           Delete(){
            document.write("Record Deleted..");
           }
        }
        function InsertClick(){
            var obj = new Database(document.querySelector("select").value);
            obj.Insert();
        }
        function DeleteClick(){
            var obj = new Database(document.querySelector("select").value);
            obj.Delete();
        }
     </script>
</head>
<body>
    <div>
        <select>
            <option>Choose Database</option>
            <option>MongoDB</option>
            <option>Oracle</option>
            <option>MySql</option>
        </select>
    </div>
    <br><br>
    <button onclick="InsertClick()">Insert</button>
    <button onclick="DeleteClick()">Delete</button>
</body>
</html>

Summary
- Property
- Accessor
- Method
- Constructor

Ex:   library/modules/database.js


export class Oracle
{
    Insert(){
        return "Record Inserted into Oracle Database";
    }
    Update(){
        return "Record Update on Oracle Database";
    }
}

export class MySql
{
    Insert(){
        return "Record Inserted into MySql Database";
    }
    Update(){
        return "Record Update on MySql Database";
    }
}

HTML

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="module">
        import { Oracle } from "../library/modules/database.js";

        let ora = new Oracle();
        document.querySelector("p").innerHTML = ora.Update();

   
    </script>
</head>
<body>
    <p></p>
</body>
</html>


Class88- Date 12dec2023

================== Code Reusability and Extensibility =====================

Classes
- Configuration
- Members
    a) Property
    b) Method
    c) Accessor
    d) Constructor

                     Code Reusability & Extensibility
- Code reusability is the process of accessing code from one module and use in another module.
- Code extensibility is the process of extending the module without disturbing the existing features.
- You can achive code reusability and extensibility using 2 techniques
   
    a) Aggregation
    b) Inheritance

- Aggregation is the process of accessing members of one class in another without configuring any relation between classes.
- It uses "Object-to-Object" communication.
- It is often called as "Has-A-Relation".
- You can access members of existing class in another class by creating an instance of class, which is known as "Aggregation".

Note:
- Extensibility is required to achive
    a) Backward Compatibility
    b) Multi Versioning Environment
Syntax:
    classA
    {
       Print() {
       }
        }
    ClassB
     {
       Print()
       {
            let obj = new ClassA();
        obj.Print();
           }
        }
   
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        class HDFC_Bank_Ver1
        {
            Personal = "Personal Banking <br>";
            CreditCard = "Credit Card Payments <br>";
            Print(){
                document.write(`${this.Personal} <br> ${this.CreditCard} <br>`);
            }
        }
        class HDFC_Bank_Ver2
        {
            Loans = "Car, Bike, Personal Loans <br>";
            Print(){
                let obj = new HDFC_Bank_Ver1();
                obj.Print();
                document.write(`${this.Loans}<br>`);
            }
        }
        class HDFC_Bank_Ver3
        {
            NRI = "NRI Banking Services <br>";
            Print(){
                let obj = new HDFC_Bank_Ver2();
                obj.Print();
                document.write(`${this.NRI}<br>`);
            }
        }
        function InstallClick(){
            var version = document.getElementById("lstVersions").value;
            switch(version)
            {
                case "ver1":
                let obj1 = new HDFC_Bank_Ver1();
                document.write("<h1>HDFC Version-1 Installed</h1>");
                obj1.Print();
                break;
                case "ver2":
                let obj2 = new HDFC_Bank_Ver2();
                document.write("<h1>HDFC Version-2 Installed</h1>");
                obj2.Print();
                break;
                case "ver3":
                let obj3 = new HDFC_Bank_Ver3();
                document.write("<h1>HDFC Version-3 Installed</h1>");
                obj3.Print();
                break;
                default:
                document.write("Please Select a Version to Install");
                breakl
            }
        }
    </script>
</head>
<body>
    <fieldset>
        <legend>Install HDFC Bank App</legend>
        <select id="lstVersions">
            <option value="-1">Select Version</option>
            <option value="ver1">Version-1 2021</option>
            <option value="ver2">Version-2 2022 [Loans] </option>
            <option value="ver3">Version-3 2023 [NRI Banking] </option>
        </select>
        <button onclick="InstallClick()">Install</button>
    </fieldset>
</body>
</html>

- Inheritance is a mechanism where we can configure relation between classes to access the members of one class in another.
- This mechanism is known as "Is-A-Relation".
- Newly created class Extends existing class.
- Existing class is known as "Super Class".
- Newly created class is known as "Derived Class".
- You can access the members of super class in derived class by using "super" keyword.
- You don't need an instance of existing class.

Syntax:
    class A
    {
        Print()
        {
        }
        }
    class B extends A
    {
        Print()
        {
        super.Print();        => class A print method
        }
        }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        class HDFC_Bank_Ver1
        {
            Personal = "Personal Banking <br>";
            CreditCard = "Credit Card Payments <br>";
            Print(){
                document.write(`${this.Personal} <br> ${this.CreditCard} <br>`);
            }
        }
        class HDFC_Bank_Ver2 extends HDFC_Bank_Ver1
        {
            Loans = "Car, Bike, Personal Loans <br>";
            Print(){
                super.Print();
                document.write(`${this.Loans}<br>`);
            }
        }
        class HDFC_Bank_Ver3  extends HDFC_Bank_Ver2
        {
            NRI = "NRI Banking Services <br>";
            Print(){
                super.Print();
                document.write(`${this.NRI}<br>`);
            }
        }
        function InstallClick(){
            var version = document.getElementById("lstVersions").value;
            switch(version)
            {
                case "ver1":
                let obj1 = new HDFC_Bank_Ver1();
                document.write("<h1>HDFC Version-1 Installed</h1>");
                obj1.Print();
                break;
                case "ver2":
                let obj2 = new HDFC_Bank_Ver2();
                document.write("<h1>HDFC Version-2 Installed</h1>");
                obj2.Print();
                break;
                case "ver3":
                let obj3 = new HDFC_Bank_Ver3();
                document.write("<h1>HDFC Version-3 Installed</h1>");
                obj3.Print();
                break;
                default:
                document.write("Please Select a Version to Install");
                breakl
            }
        }
    </script>
</head>
<body>
    <fieldset>
        <legend>Install HDFC Bank App</legend>
        <select id="lstVersions">
            <option value="-1">Select Version</option>
            <option value="ver1">Version-1 2021</option>
            <option value="ver2">Version-2 2022 [Loans] </option>
            <option value="ver3">Version-3 2023 [NRI Banking] </option>
        </select>
        <button onclick="InstallClick()">Install</button>
    </fieldset>
</body>
</html>

Inheritance Rule:
- A derived class constructor must call super class constructor.
- In many OOP languages it is implicit, but in JavaScript it is explicit.
- First a base class constructor must be called then followed by derived class constructor.
- You have to use "super()"  to access the super constructor.

Ex:
<script>
    class SuperClass
    {
        constructor(){
            document.write("Super Class Constructor<br>");
        }
    }
    class DerivedClass extends SuperClass
    {
        constructor(){
            super();
            document.write("Derived Class Constructor");
        }
    }
    let obj = new DerivedClass();
</script>


Class89 = Date 13nov2023

===================== Polymorphism and Events =====================

Aggregation    : Has-A-Relation
Inheritance    : Is-A-Relation

                            Polymorphism
- The term "Poly" refers to "Many" and "Morphos" means "Forms".
- Polymorphism allows a component to work for various situations.
- In technical terms a single super class object can use the memory of multiple derived classes, which resembles "Polymorphism".

Syntax:
    let obj = new Array(new Class1(), new Class2(), ...);

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        class Employee
        {
            FirstName;
            LastName;
            Designation;
            Print(){
                document.write(`${this.FirstName} ${this.LastName} - ${this.Designation}<br>`);
            }
        }
        class Developer extends Employee
        {
            FirstName = "Raj";
            LastName = "Kumar";
            Designation = "Developer";
            Role = "Developer Role : Build, Debug, Test, Deploy";
            Print(){
                super.Print();
                document.write(`${this.Role}`);
            }
        }
        class Admin extends Employee
        {
            FirstName = "Kiran";
            LastName = "Rao";
            Designation = "Admin";
            Role = "Admin Role : Authorizations";
            Print(){
                super.Print();
                document.write(`${this.Role}`);
            }
        }
        class Manager extends Employee
        {
            FirstName = "Tom";
            LastName = "Hanks";
            Designation = "Manager";
            Role = "Manager Role : Approvals";
            Print(){
                super.Print();
                document.write(`${this.Role}`);
            }
        }
        let employees = [];
        employees[0] = new Developer();
        employees[1] = new Admin();
        employees[2] = new Manager();
        let designation = prompt("Enter Designation");
        for(var employee of employees)
        {
            if(employee.Designation===designation){
                employee.Print();
            }
        }
    </script>
</head>
<body>
   
</body>
</html>

Task: Create seprate classes for all mathematical operations [+, - , *, %]
      Create one object that manages all calculations.


                            Browser Events

- Event is a message sent by sender to its subscriber in order to notify the change.
- Event follows a software design pattern called "Observer", which is a communication pattern.
- Sender Sends a notification to Subscriber.
- Subscriber comprises of actions to perform when notified.

        function InsertClick()        => Subscriber
        {
        }

        <button onclick="InsertClick()">    => Sender

- Event uses a "Delegate" mechanism, which is a function pointer.
- It is not calling the function, it is pointing towards the function.

Event Handler:
- Event handler defines the actions to perform on specific element trigger.

        onclick                => Event
        onclick="InsertClick()"    => Event Handler

Event Listener:
- It allows to bind any event to element dynamically.
- It enables clean separation of code and design.

    document.querySelector("button").addEventListener("click", function(){

    })

EX:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function bodyload(){
            document.querySelector("button").addEventListener("click", function(){
                 alert("Button CLicked");
            })
        }
    </script>
</head>
<body onload="bodyload()">
    <button>Insert</button>
</body>
</html>

Class90= 14dec2023

========================= Event Args, Mouse Events ===========================

JavaScript Browser Events
- Sender
- Subscriber
- Observer
- Delegate
- Event
- Event Handler
- Event Listener
   
                        Event Arguments

- Every event comprises of default and custom arguments.
- The default event args are
        a) this
        b) event

- "this" sends information about current element, which includes  id, name, class, value etc..
- "event" sends information about current event, which includes
        clientX
        clientY
        altKey
        ctrlKey
        shiftKey
        keyCode
        charCode
        which  etc..
Syntax:

        <button onclick="Insert(this, event)">

        function Insert(obj, e)
        {
        }

- You can use any argument without order dependency.

        onclick="Insert(event, this)">
        onclick="Insert(this)">
        onclick="Insert(event)">
       
- You can send specific details

        onclick="Insert(this.id)"

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
       function InsertClick(obj, e){
            document.write(`
                 Button Id : ${obj.id} <br>
                 Button Name: ${obj.name} <br>
                 Button Class: ${obj.className} <br>
                 X Position: ${e.clientX} <br>
                 Ctrl Key  : ${e.ctrlKey}
            `);
       }
    </script>
</head>
<body>
    <button onclick="InsertClick(this, event)" id="btnInsert" name="Insert" class="btn btn-primary">Insert</button>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
       function SetColor(color){
        document.querySelector("h1").style.color = color;
       }
    </script>
</head>
<body>
    <button onclick="SetColor(this.name)" name="Red">Red</button>
    <button onclick="SetColor(this.name)" name="Green">Green</button>
    <button onclick="SetColor(this.name)" name="Blue">Blue</button>
    <h1>Welcome to JavaScript</h1>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
       function GetObject(e){
          var p = document.querySelector("p");
          if((e.clientX>=119 && e.clientX<=154) && (e.clientY>=149 && e.clientY<=175)) {
             p.innerHTML = "Lavie Hand Bag : 3000/-";
          } else {
            p.innerHTML = "";
          }
       }
    </script>
</head>
<body>
   <img onclick="GetObject(event)" src="../public/images/women-fashion.jpg" width="200" height="200">
   <p></p>
</body>
</html>

- You can pass custom arguments, which can be primitive or non-primitive.
- You can pass the custom arguments along with default arguments.

Syntax:
        <button onclick="Insert( { }, [ ], 0, ' ', true)">

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
       function InsertClick(...args){
            var [title, cities, rating, button] = args;
            document.write(`
               <h2>${title}</h2>
               ${cities.toString()} <br>
               Rating : ${rating.Rate} [${rating.Count}] <br>
               Button Id : ${button.id}
            `);
       }
    </script>
</head>
<body>
   <button id="btnInsert" onclick="InsertClick('Welcome',['Delhi, Hyd'], {Rate:4.3, Count:4560}, this)">Insert</button>
</body>
</html>

                        Various Browser Events
- All JavaScript events are related to browser.
- The browser events can be configured to any element in page.
- Browser events are of various categories

    1. Mouse Events
    2. Keyboard Events
    3. Button Events
    4. Clipboard Events
    5. Timer Events
    6. Element State Events
    7. Touch Events
    8. Form Events etc...

                            Mouse Events
- onmouseover
- onmouseout
- onmousedown
- onmouseup
- onmousemove


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        section {
            display: grid;
            grid-template-columns: 2fr 10fr;
        }
        nav div {
            width: 80px;
            height: 80px;
            padding: 2px;
            margin-bottom: 20px;
            border:2px solid blue;
        }
        nav div :hover {
            cursor: grab;
        }
        .zoomIn {
            transform: scale(3);
            transition: 2s;
        }
        .zoomOut{
            width: 400px;
            height: 500px;
        }
    </style>
    <script>
         function ShowPreview(src){
            document.getElementById("imgPreview").src = src;
         }
         function ZoomIn(){
            document.getElementById("imgPreview").className = "zoomIn";
         }
         function ZoomOut(){
            document.getElementById("imgPreview").className = "zoomOut";
         }
    </script>
</head>
<body>
    <section>
        <nav>
            <div>
                <img onmouseover="ShowPreview(this.src)" src="../public/images/iphone/m1.png" width="80" height="80">
            </div>
            <div>
                <img onmouseover="ShowPreview(this.src)" src="../public/images/iphone/m2.png" width="80" height="80">
            </div>
            <div>
                <img onmouseover="ShowPreview(this.src)" src="../public/images/iphone/m3.png" width="80" height="80">
            </div>
            <div>
                <img onmouseover="ShowPreview(this.src)" src="../public/images/iphone/m4.png" width="80" height="80">
            </div>
        </nav>
        <main>
            <div style="width: 400px; height: 500px; overflow: hidden; border:1px solid gray">
                <img width="400" height="500" onmousedown="ZoomIn()" onmouseup="ZoomOut()" id="imgPreview">
            </div>
        </main>
    </section>
</body>
</html>

Ex: Mouse Move

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function GetPosition(e){
            var pic = document.querySelector("img");
            pic.style.position = "fixed";
            pic.style.top = e.clientY + "px";
            pic.style.left = e.clientX + "px";
        }
    </script>
</head>
<body onmousemove="GetPosition(event)">
    <div style="height: 1000px;">Move mouse pointer to test..</div>
    <img src="../public/images/flag.gif" width="50" height="50">
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function GetPosition(e){
           var star = document.getElementById("star");
           star.style.position = "fixed";
           star.style.top = e.clientY + "px";
           star.style.left= e.clientX + "px";
           star.style.animationName = "Blink";
           star.style.animationDuration = "700ms";
           star.style.animationIterationCount = "infinite";
        }
    </script>
    <style>
        .bi-star-fill {
            font-size: 30px;
            color:green;
        }
        @keyframes Blink {
            from {
                opacity: 0;
                font-size: 10px;
            }
            to {
                opacity: 1;
                font-size: 40px;
            }
        }
    </style>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body onmousemove="GetPosition(event)">
    <div style="height: 1000px;">Move mouse pointer to test..</div>
    <div class="bi bi-star-fill" id="star"></div>
</body>
</html>


                        Keyboard Events
- onkeyup
- onkeydown
- onkeypress

Class91= 15dec2023

==================================== Events Continued ==================================

Event Arguments
Events
- Mouse Events

                         Keyboard Events

- onkeyup
- onkeydown
- onkeypress

Note: If you are writing for character then use keyup & keydown.
          If you are writing for character code then use keypress.
      The key event args are:
            keyCode
            charCode
            which
            shiftKey
            ctrlKey
            altKey
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyUser(){
            var userid = document.getElementById("UserId").value;
            var userError = document.getElementById("UserError");

            fetch("../data/users.json")
            .then(response=> response.json())
            .then(users=>{
                for(var user of users)
                {
                    if(user.UserId===userid){
                        userError.innerHTML = "User Id Taken - Try Another".fontcolor('red');
                        break;
                    } else {
                        userError.innerHTML = "User Id Available".fontcolor('green');
                    }
                }
            })
        }
        function VerifyCaps(e){
            var PwdError = document.getElementById("PwdError");
            if(e.keyCode>=65 && e.keyCode<=90){
                PwdError.style.display = "block";  
            } else {
                PwdError.style.display = "none";
            }
        }
    </script>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body>
    <fieldset>
        <legend>Register User</legend>
        <dl>
            <dt>User Id</dt>
            <dd><input type="text" onkeyup="VerifyUser()" id="UserId"></dd>
            <dd id="UserError"></dd>
            <dt>Password</dt>
            <dd><input type="password" onkeypress="VerifyCaps(event)" id="Password"></dd>
            <dd id="PwdError" style="color:goldenrod;display: none;">
                <span class="bi bi-exclamation-triangle"></span> Warning : CAPS ON
            </dd>
        </dl>
    </fieldset>
</body>
</html>

                            Button Events
- onclick                [left single click]
- ondblclick            [left double click]
- oncontextmenu        [right single click]

Note: If you want to disable any event, then configure a function that returns false.

Syntax:
    document.oncontextmenu = function(){
        return false;
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function OpenImage(){
            window.open("../public/images/women-fashion.jpg","Fashion","width=400 height=500");
        }
        document.oncontextmenu = function(){
            alert("Right Click Not Allowed");
            return false;
        }
        document.onselectstart = function(){
            return false;
        }
    </script>
</head>
<body>
    <img src="../public/images/women-fashion.jpg" ondblclick="OpenImage()" width="100" height="100">
    <p>Double Click to view large.</p>
    <p>Selection Disabled on this page.</p>
</body>
</html>

                            Element State Events

-onchange
-onfocus
-onblur
-onselectstart

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyUserId(obj){
            var userError = document.getElementById("userError");
            if(obj.value==""){
                userError.innerHTML = "User ID Required".fontcolor('red');
            } else {
                userError.innerHTML = "";
                document.getElementById("UserId").value = obj.value.toUpperCase();
            }
        }
        function ShowTip(){
            document.getElementById("userError").innerHTML = "Name in Block Letters Only".fontcolor('gold');  
        }
    </script>
</head>
<body>
    <fieldset>
        <legend>Register User</legend>
        <dl>
            <dt>User Id</dt>
            <dd><input type="text" id="UserId" onfocus="ShowTip()" onblur="VerifyUserId(this)"></dd>
            <dd id="userError"></dd>
        </dl>
    </fieldset>
</body>
</html>

                          Clipboard Events

oncut
oncopy
onpaste

- Clipboard is the temporary memory for windows.
- The content that you cut or copy is kept on clipboard.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function Cut(){
              document.getElementById("lblStatus").innerHTML = "Removed - Copied to Clipboard";
        }
        function Copy(){
            document.getElementById("lblStatus").innerHTML = "Copied to Clipboard";
        }
    </script>
</head>
<body>
   <dl>
    <dt>OTP</dt>
    <dd><input type="text" id="OTP" oncut="Cut()" oncopy="Copy()" value="88456"></dd>
    <dd id="lblStatus"></dd>
    <dt>Password</dt>
    <dd><input type="password" onpaste="return false"></dd>
   </dl>
</body>
</html>

Syntax:
    <script>
        document.oncopy = function() {
            return false;
        }
    </script>

                            TimerEvents
setTimeout()
clearTimeout()
setInterval()
clearInterval()

                            Touch Events
ontouchstart
ontouchend
ontouchmove

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function ShowOffer(val)
        {
            var p = document.querySelector("p");
            switch(val)
            {
                case "women":
                 p.innerHTML = "20% OFF on women fashion";
                 break;
                case "men":
                p.innerHTML = "50% oFF on latest arrivals - Men Fashion";
                break;
                case "kids":
                p.innerHTML = "15% OFF on Kids Fashhion";
                break;
            }
        }
    </script>
</head>
<body>
    <img ontouchstart="ShowOffer('women')" src="../public/images/women-fashion.jpg" width="200" height="300">
    <img ontouchstart="ShowOffer('men')" src="../public/images/men-fashion.jpeg" width="200" height="300">
    <img ontouchstart="ShowOffer('kids')" src="../public/images/kids-fashion.jpg" width="200" height="300">
    <p></p>
</body>
</html>

                        Form Events
onsubmit
onreset

- These are the events configure for <form> element.
- They define actions to perform when user submits or reset a form.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <form onreset="alert('Form will reset')" onsubmit="alert('form data will be submitted to API')">
        UserName : <input type="text" name="UserName"> <button>Submit</button> <button type="reset">Cancel</button>
    </form>
</body>
</html>

Class92= Date 16nov2023

============================ BOM ===========================

Browser Objects
                        [BOM - Browser Object Model]

1. window
2. location
3. navigator
4. history
5. document

window:
- It provides properties and methods that are used to control the browser window.

            alert()
            prompt()
            confirm()
            open()
            close()
            print() etc..

Syntax:
        window.alert()
        alert()

location:
- It provides properties and methods that are used to access client location details.

        host            IP address / server name
        port            It returns the port number
        href            It returns complete URL
        protocol        It returns the protocol [http, https, file..]
        search        	It returns query string
        hash        	It returns current location "id"  [ #name ]        
        reload()        It reloads current page.

Ex:
<script>
    if(location.protocol==="http:") {
        document.write(`
         Your IP : ${location.host}  <br>
         Port Number : ${location.port} <br>
         URL : ${location.href} <br>
         
    `);
    } else {
        document.write(`Please run the app using live server - You are not using live server`);
    }
</script>

FAQ: How to navigate dynamically in JavaScript?
Ans:  By using "location.href"


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function LoginClick(){
            var username = document.getElementById("UserName").value;
            var password = document.getElementById("Password").value;
            if(username==="john" && password==="john@123"){
                location.href="../javascript-examples/kfc-online.html";
            } else {
                location.href="error.html";
            }
        }
    </script>
</head>
<body>
    <h2>User Login</h2>
    <dl>
        <dt>UserName</dt>
        <dd><input type="text" id="UserName"></dd>
        <dt>Password</dt>
        <dd><input type="password" id="Password"></dd>
    </dl>
    <button onclick="LoginClick()">Login</button>
</body>
</html>

Navigator:
- It provides properties and methods that are used to get client browser details.

            appName        : browser family name
            appVersion        : browser version
            userAgent        : browser supported platforms
            platform            : current client OS platform
            language            : current client browser language
            cookieEnabled    : cookie status
            plugins[]            : gets all plugins installed on browser
            mimeTypes[]        : gets all supports file types on browser.
            geoLocation        : gets the current geolocation.

Ex:
<script>
    document.write(`
          Your Browser Version : ${navigator.appVersion} <br>
          Cookies : ${(navigator.cookieEnabled===true)?"You can login":"Please Enable Cookies"} <br>
          Platform : ${navigator.platform} <br>
          Language: ${navigator.language}
    `);
</script>

Ex:
<script>
    for(var item of navigator.plugins){
        document.write(item.name  + "<br>");
    }
</script>

Ex:
<script>
    for(var item of navigator.mimeTypes){
        document.write(item.type  + "<br>");
    }
</script>

Ex: GeoLocation

<script>
     navigator.geolocation.getCurrentPosition(function(position){
          document.write(`
                Latitude : ${position.coords.latitude} <br>
                Longitude : ${position.coords.longitude}
          `);
     })
</script>

history:
- It used to access current browsing history details.

        length        : gets total count of pages in current browsing history
        forward()        : moves to next page in current history
        back()        : moves to previous page in current history
        go()            : moves to specific page in history.

Ex:
<script>
    var now = new Date();
    document.write(`
        You opened the page at : ${now.toLocaleTimeString()} <br>
        You Visited ${history.length} Page(s)
    `)
</script>

Document:
- It provides all properties and methods to handle elements in document.

    getElementById()
    querySelector()
    write()  
    appendChild() etc..


Class93= Date 18dec2023

================================== State Management =================================

Browser Objects
- window
- location
- navigator
- history
- document

                           State Management

- Web applications use "http" as protocol.
- A protocol defines rules, which are followed by computers in a network to communicate with each other.
       
            SMTP	- 	Email Communication
            HTTP    - 	Web
            HTTPS   - 	Web Secured
            MSMQ    - 	Messaging Service
            FTP		- 	File Transfer [Intranet]
            etc..

- HTTP is a state less protocol.

- A server allocates memory for the request made by client, It will process the request and sends a response to client. After sending response it cleans up client related information from memory. [This is known as stateless]

- Stateless nature of server is good to manage memory. But it is not good for contineous operations from client

- Every web application requires state management techniques, so that client related information can be saved and accessed across requests.

- State management techniques are classified into 2 categories
       
        a) Client Side State Management
        b) Server Side State Management

- Client Side State Management allows to store client details on the client device.

        a) Query String
        b) Cookies
        c) Session Storage
        d) Local Storage

Query String:
- It is a value appended into URL and stored in browser address bar.
- It comprises of Key and Value appended using "?"

            ?key=value&key=value

- A query string can carry data from one page to another.
- How ever it is not safe, can't submit complex data and have limit for data. [2048chars]
- You can access the querystring using "location.search".

Ex:
1. Add 2 pages
    a) login.html
    b) home.html

2. login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
</head>
<body>
    <form method="get" action="home.html">
        <dl>
            <h3>Login</h3>
            <dt>User Id</dt>
            <dd><input type="text" name="UserId" id="UserId"></dd>
        </dl>
        <button>Login</button>
    </form>
</body>
</html>

3. home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <script>
        function bodyload(){
            var str = location.search;
            var uname = str.substring(str.indexOf("=")+1);
            document.querySelector("p").innerHTML = `Hello ! ${uname}`;
        }
    </script>
</head>
<body onload="bodyload()">
    <h3>Home</h3>
    <p></p>
</body>
</html>

Local Storage:
- It is a memory location in your browser.
- It is permanent storage.
- It is accessible for other tabs in browser.
- It is available even after you close browser or shutdown your device.
- You have to delete manually.
- You can store large amount of data.
- It is a key and value collection same like "map".

        localStorage.setItem("key", "value");
        localStorage.getItem("key");
        localStorage.removeItem("key");

Ex:
1. Login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <script>
        function LoginClick(){
            var userId = document.getElementById("UserId").value;
            localStorage.setItem("UserId", userId);
            location.href = "home.html";
        }
    </script>
</head>
<body>
   
        <dl>
            <h3>Login</h3>
            <dt>User Id</dt>
            <dd><input type="text" name="UserId" id="UserId"></dd>
        </dl>
        <button onclick="LoginClick()">Login</button>
   
</body>
</html>

2. home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <script>
        function bodyload(){
             var userid = localStorage.getItem("UserId");
             if(userid===null) {
                location.href = "login.html";
             } else {
                document.querySelector("p").innerHTML = `Hello ! ${userid}`;
             }
        }
        function SignoutClick(){
            localStorage.removeItem("UserId");
            location.href="login.html";
        }
    </script>
</head>
<body onload="bodyload()">
    <h3>Home  <button onclick="SignoutClick()">Signout</button> </h3>
    <p></p>
</body>
</html>


Session Storage:
- It is the memory of browser allocated for client.
- It is temporary memory.
- It is accessible only to current tab.
- It is removed when browser is closed.

Syntax:
     sessionStorage.setItem(key, value)
     sessionStorage.getItem(key)
     sessionStorage.removeItem(key)

Ex:
1. login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <script>
        function LoginClick(){
            var userId = document.getElementById("UserId").value;
            sessionStorage.setItem("UserId", userId);
            location.href = "home.html";
        }
    </script>
</head>
<body>
   
        <dl>
            <h3>Login</h3>
            <dt>User Id</dt>
            <dd><input type="text" name="UserId" id="UserId"></dd>
        </dl>
        <button onclick="LoginClick()">Login</button>
   
</body>
</html>

2. home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <script>
        function bodyload(){
             var userid = sessionStorage.getItem("UserId");
             if(userid===null) {
                location.href = "login.html";
             } else {
                document.querySelector("p").innerHTML = `Hello ! ${userid}`;
             }
        }
        function SignoutClick(){
            sessionStorage.removeItem("UserId");
            location.href="login.html";
        }
    </script>
</head>
<body onload="bodyload()">
    <h3>Home  <button onclick="SignoutClick()">Signout</button> </h3>
    <p></p>
</body>
</html>

Class94= Date 19dec2023

============================ JavaScript AJAX ============================

State Management
    - Query String
    - Local Storage
    - Session Storage
    - Cookies

                                             Cookies
- Cookies a simple text document, which is created and saved on client device.
- A cookie comprises of client related data, which is made available across pages used by client.
- To use cookies, they must be enabled on browser.
- You can verify the cookie status using "navigator.cookieEnabled" property.
- Cookies are 2 types
        a) In memory cookie
        b) Persistent cookie

- In memory cookie is temporary cookie. It expires when session is closed.

Syntax:
    document.cookie = "key=value";

- Persistent cookie is permanent cookie. It is defined with expiry.

Syntax:
    document.cookie = "key=value; expires=date/time";

Note: The date and time must be defined in UTC format.

                Fri, 22 Dec 2023 16:40:30 GMT

Ex:
1. login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <script>
        function LoginClick(){
            var userId = document.getElementById("UserId").value;
            document.cookie = `userid=${userId}; expires=Fri, 22 Dec 2023 00:00:00 GMT`;
            location.href = "home.html";
        }
    </script>
</head>
<body>
   
        <dl>
            <h3>Login</h3>
            <dt>User Id</dt>
            <dd><input type="text" name="UserId" id="UserId"></dd>
        </dl>
        <button onclick="LoginClick()">Login</button>
   
</body>
</html>

2. home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <script>
        function bodyload(){
          document.querySelector("p").innerHTML = document.cookie.substring(document.cookie.indexOf("=")+1);
        }
        function SignoutClick(){
         
        }
    </script>
</head>
<body onload="bodyload()">
    <h3>Home  <button onclick="SignoutClick()">Signout</button> </h3>
    <p></p>
</body>
</html>

Note: JavaScript Applications can use various 3rd party state management libraries.
      The popular predictable state container for JS apps is "Redux".


                           JavaScript AJAX

- Asynchronous JavaScript And XML.
- AJAX is used to achive "Partial Postback".
- It allows to add new content into page without reloading the page.
- It can submit a specific portion of page without reloading the page.
- It improves the performance of application.
- JavaScript uses "XMLHttpRequest" object to handle AJAX calls.

Syntax:
        var http = new XMLHttpRequest();

        http.open()        => It configure the request, which includes
                                a) request type [get, post..]
                                b) URL
                                c) Async [boolean]

        http.send()        => It will process the request.

        http.onreadyStateChange => It defines the function to execute when                                              requested path is available.

        http.readyState    => It have 4 stages
                                1    = Initial
                                2    = send
                                3    = process
                                4    = ready with response

        http.response        => It defines the response text, xml and html.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ajax</title>
    <script>
        function bodyload(){
            var now = new Date();
            document.querySelector("p").innerHTML = `Page Requested on ${now.toLocaleString()}`
        }
        function LoadClick(){
            var http = new XMLHttpRequest();
            http.open("get", "../data/help.txt",true);
            http.send();
            http.onreadystatechange = function(){
                if(http.readyState==4)
                {
                     document.getElementById("data").innerHTML = http.responseText;
                }
            }
        }
        function LoadShop(){
            var http = new XMLHttpRequest();
            http.open("get", "../shopper-template.html", true);
            http.send();
            http.onreadystatechange =  function(){
                if(http.readyState==4){
                    document.querySelector("section").innerHTML = http.responseText;
                }
            }
        }
    </script>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body onload="bodyload()">
    <p id="time"></p>
    <button onclick="LoadClick()">Load Help</button>
    <button onclick="LoadShop()">Shop</button>
    <pre id="data"></pre>
    <section>

    </section>
</body>
</html>

Ex: Fakestore using Ajax XMLHttpRequest

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function LoadClick(){
            var http = new XMLHttpRequest();
            http.open("get", "http://fakestoreapi.com/products&quot;, true);
            http.send();

            http.onreadystatechange = function(){
                if(http.readyState==4){
                    var products = JSON.parse(http.responseText);
                    products.map(function(product){
                        var img = document.createElement("img");
                        img.src= product.image;
                        img.width = "100";
                        img.height = "100";

                        document.getElementById("container").appendChild(img);
                    })
                }
            }
        }
    </script>
</head>
<body>
    <button onclick="LoadClick()">Load Products</button>
    <div id="container" style="display: flex; justify-content: space-between; flex-wrap: wrap;">

    </div>
</body>
</html>

Class95= Date 20dec2023

============================ FAQ ============================

FAQ's 
Sudhakar Sharma
â€¢
8:47â€¯AM
FAQ's:  Events, Browser Objects, Ajax, State

1. What is the pattern used by event?
A. Observer

2. What is Event Handler?

3. What is Event Listener?

4. What are default event arguments?

5. Can we pass custom arguments?

6. What is the type for custom argument?

7. Can we define rest and spread for events?

8. How to prevent default event?
A. Generic elements have default events that fireup automatically.
    You can prevent the default event by using the event method "preventDefault()".

        function  SubmitClick(e)
        {
           e.preventDefault();
        }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function SubmitClick(e){
            e.preventDefault();
            alert("Form will Submit");
        }
    </script>
</head>
<body>
    <form onsubmit="SubmitClick(event)">
        User Name :
        <input type="text" name="Username"> <button>Submit</button>
    </form>
</body>
</html>



9. How to stop propagation? [Event]
A. Propagation is the process of executing the parent events automatically after the child element event is triggered.
    The child event have to stop propagation using event method "stopPropagation()".


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function ContainerClick(){
            alert("You clicked inside container");
           
        }
        function SubmitClick(e){
           
            alert("You clicked submit button");
            e.stopPropagation();
        }
    </script>
</head>
<body>
     <div onclick="ContainerClick()" style="border:2px solid black; padding: 20px; width: 200px;">
        Container
        <button onclick="SubmitClick(event)">Submit</button>
     </div>
</body>
</html>

10. How to submit form using the events of other elements in page?
A. By calling the form element "submit()" method on any browser event.
       
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function CityChanged(){
            frmRegister.submit();
        }
    </script>
</head>
<body>
    <form name="frmRegister" action="ajax-fakestore.html">
        Your City:
        <select name="City" onchange="CityChanged()">
            <option>Choose City</option>
            <option>Delhi</option>
            <option>Hyd</option>
        </select>
    </form>
</body>
</html>

11. What is state?

12. Why you need State?

13. Why Http is known as state less protocol?

14. What are various state management techniques used client side?

15. Difference between localStorage and SessionStorage?

16. What are cookies?

17. How to make a cookie permanent?

18. How to check the status of cookie, enabled or not?
      [navigator.cookieEnabled]

19. How to delete a permanent cookie?
      [by configuring expiry to elapsed date]

20. How to navigate to any page dynamically?
       [location.href]

21. How to check the status of JavaScript, enabled or not?
A. By using <noscript> element.

    <body>
        <noscript>
              please enable javascript on your browser
        </noscript>
    </body>

22. How to check the status of any plugin?
A.  navigator.plugins[]

Ex:
<script>
    for(var plugin of navigator.plugins)
    {
        document.write(plugin.name  + "<br>");
    }
    if(navigator.plugins['Microsoft Edge PDF Viewer'])
    {
        document.write("You can watch PDF Documents<br>");
        alert("You can install additional plugins");
        location.href = "http://www.adobe.com&quot;;
    }
    else
    {
        document.write("Please install PDF Plugin");
    }
</script>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function Status(){
            document.querySelector("p").innerHTML = "<div class='spinner-border'></div>Transaction Completed<br>Please Wait we are redirecting..";
        }
        function Redirect(){
            location.href = "http://www.amazon.in&quot;;
        }
        function PayClick(){
            setTimeout(Status,2000);
            setTimeout(Redirect,10000);
        }
    </script>
</head>
<body>
    <button onclick="PayClick()">Pay</button>
    <p></p>
</body>
</html>

23. How to reload a page on button click?
A.   location.reload()


24. How to reload a page at regular time intervals?
A.
        <meta http-equiv="refresh"  content="5">

25. How to get current location of client?
A.   By using navigator.getGeolocation(), using latitude and longitude values.

26. What is Ajax?

27. Why we need Ajax?

28. What is readyState?

29. What are the response types?

30.  How to convert a response into JSON?
A.    JSON.parse()    => convert string into JSON
    JSON.stringfy()  => convert JSON into string.


                            jQuery
- John Resig introduced a library for JavaScript in 2006 by name "jQuery".
- A library contains pre-defined functions.
- jQuery functions are designed to implement the mechanism "Write Less-Do More".
- jQuery reduces browser compatibility issues.

Class96= Date 21dec2023

============================ JQuery ============================

jQuery	-	write less, do more

- jQuery is a JavaScript library used to build interactive UI.
- It provides various pre-defined functions to handle
        a) Data Binding
        b) Class Binding
        c) Style Binding
        d) DOM Manipulations
        e) Animations & Effects

Setup jQuery:

    >npm install jquery --save

Configure jQuery:

    <head>
        <script  src="../node_modules/jquery/dist/jquery.js"> </script>
        <script>
             $(function(){$(document).ready(function()
			 {
                            (or)
              })                         })
        </script>
    </head>

Refer HTML elements:
- jQuery can refer HTML elements by using CSS selectors.

Syntax:
        <p>  </p>
        <div id="msg">
        <button class="btn">
        <nav>
            <span> </span>
        </nav>

        $("p").text()
        $("#msg").text()
        $(".btn").html()
        $("nav span").text()

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script>
        $(function(){
             $("h1").text("jQuery");
             $("#subtitle").text("write less, do more");
             $(".text").text("JavaScript library for building UI");
        })
    </script>
</head>
<body>
    <h1></h1>
    <p id="subtitle"></p>
    <div class="text"></div>
</body>
</html>
       
jQuery DOM methods:

        text()            innerText
        html()            innerHTML
        val()                value
        attr()                attribute
        prop()            property
        css()            set style
        append()            add to end
        prepend()        add to start
        before()            add above
        after()            add after
        appendTo()        add to specific element
        etc..

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script>
        $(function(){
             $("h1").text("jQuery");
             $("#subtitle").text("write less, do more");
             $("#subtitle").prepend("<b>jQuery can</b> ");
             $("#subtitle").append(" functionality");
             $("#subtitle").before("Hello !");
             $("#subtitle").after("Start using jquery");
             $(".text").text("JavaScript library for building UI");
        })
    </script>
</head>
<body>
    <h1></h1>
    <p id="subtitle"></p>
    <div class="text"></div>
</body>
</html>


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script>
        $(function(){
            $("<img src='../public/images/women-fashion.jpg' width='100' height='100'>").appendTo("#container");
            $("#container").append("<button>Submit</button>");
        })
    </script>
</head>
<body>
    <div id="container"></div>
</body>
</html>


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script>
        $(function(){
             var categories = ["All", "Electronics", "Footwear", "Fashion"];
             categories.map(category =>{
                  $(`<li>${category}</li>`).appendTo("ol");
                  $(`<option>${category}</option>`).appendTo("select");
             })
        })
    </script>
</head>
<body>
    <ol></ol>
    <select></select>
</body>
</html>


Ex: Fakestore

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script>
        $(function(){
             fetch('http://fakestoreapi.com/products&#39;)
             .then(res=> res.json())
             .then(products=> {
                  products.map(product=> {
                      $(`<tr>
                           <td>${product.title}</td>
                           <td><img src=${product.image} width="100" height="100"></td>
                        </tr>`).appendTo("tbody");
                  })
             })
        })
    </script>
</head>
<body class="container-fluid">
   <table class="table mt-4 table-hover">
      <thead>
        <tr>
            <th>Title</th>
            <th>Preview</th>
        </tr>
      </thead>
      <tbody>

      </tbody>
   </table>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script>
        $(function(){
             fetch('http://fakestoreapi.com/products&#39;)
             .then(res=> res.json())
             .then(products=> {
                  products.map(product=> {
                      $(`
                       <div class="card m-2 p-2" style="width:200px">
                         <img src=${product.image} class="card-img-top" height="140">
                         <div class="card-header" style="height:140px">
                            ${product.title}
                         </div>
                       </div>
                      `).appendTo("main");
                  })
             })
        })
    </script>
</head>
<body class="container-fluid">
     <main class="d-flex flex-wrap overflow-auto mt-4" style="height: 500px;">

     </main>
</body>
</html>

jQuery Events:
- jQuery uses all JavaScript browser events.
- jQuery events are added to elements as listeners.
- It enables clean separation of code and design.

Syntax:

    <button> Insert </button>
    <select> </select>

      $("button").click(()=>{ });
      $("select").change(()=> { });
   
- Event arguments in jQuery support only "event".

      $("button").click((e)=>{
            e.target.id, name, value, className
            e.clientX, clientY, keyCode
    })


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script>
        $(function(){
            $("#btnInsert").click((e)=>{
                $("p").html(`Record Inserted<br> Id=${e.target.id}<br>X=${e.clientX}`);
            })

            $("select").change(()=>{
                $("p").html(`Your Selected : ${$("select").val()}`)
            })
        })
    </script>
</head>
<body class="container-fluid">
     <button id="btnInsert">Insert</button>
     <select>
        <option>Select Operation</option>
        <option>Insert</option>
        <option>Update</option>
        <option>Delete</option>
     </select>
     <p></p>
</body>
</html>

Class97- Date = 22dec2023

======================= jQuery Ajax ========================

jQuery DOM Manipulations
jQuery Events

                                jQuery Effects

- jQuery provides various methods for CSS effects

    show()
    hide()
    toggle()
    slide()
    slideToggle()
    fade()
    fadeToggle()
    css()
    etc..

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script>
        $(function(){
            $("button").click(()=>{
                 $("img").fadeToggle(2000);
            })
        })
    </script>
</head>
<body class="container-fluid">
        <button class="btn btn-primary mt-2">Preview</button>
        <div class="mt-3">
            <img src="../public/images/kids-fashion.jpg" width="200" height="300">
        </div>
</body>
</html>

                             jQuery Ajax
- JavaScript provides Ajax actions using
    a) XMLHttpRequest
    b) fetch()

    * They can't use the data directly from API
    * They require parsing technique to convert data into JSON
    * They are not fully secured, can be blocked by CORS.
       [Cross Origin Resource Sharing]
    * They are not good in error handling

- jQuery provides Ajax methods

    $.ajax()
    $.getJSON()
    $.ajaxStart()
    $.ajaxEnd()
    $.ajaxStop()
    $.ajaxError()
    $.ajaxComplete()
    $.ajaxSuccess()
    etc..

- jQuery Ajax Features
   
    * Implicitly converts JSON
    * Explicit parsing not required
    * Good in error handling
    * Manages CORS

Syntax:
     $.ajax({
        method: "get|post|put|delete",
        url: "path",
        success: () => {} ,
        error: ( ) => { },
        data: dataToSend [ post, put ]
    })

    GET        - Fetching
    POST    - Submit
    PUT        - Modify
    DELETE    - Remove
    PATCH    - Partial Modify


Note: You can't configure events directly for elements that are appended into page dynamically and are present as child elements in a hierarchy of elements.
      jQuery provides "on()" method to find the element and configure an event.


      $(document).on("event", "elementRef", ( ) =>{ })

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script>

        function LoadCategories(){
            $.ajax({
                method: "get",
                url: "http://fakestoreapi.com/products/categories&quot;,
                success: (categories)=> {
                    categories.unshift("all");
                    categories.map(category=>{
                          $(`<option value=${category}>${category.toUpperCase()}</option>`).appendTo("#lstCategories");
                    })
                }
            })
        }

        function LoadProducts(url){
            $("main").html("");
            $.ajax({
                method:"get",
                url: url,
                success: (products=> {
                    products.map(product=>{
                        $(`
                          <div class="card m-2 p-2" style="width:200px">
                            <img src=${product.image} class="card-img-top" height="140">
                            <div class="card-header overflow-auto" style="height:140px">
                                <p> ${product.title} </p>
                            </div>
                            <div>
                                <button id="btnAdd" value=${product.id} class="btn btn-dark w-100"> Add to Cart </button>
                            </div>
                          </div>
                        `).appendTo("main");
                    })
                })
            })
        }

        $(function(){
            LoadCategories();
            LoadProducts(`http://fakestoreapi.com/products`);

            $("#lstCategories").change(()=>{
                if($("#lstCategories").val()==="all"){
                    LoadProducts(`http://fakestoreapi.com/products`);
                } else {
                    LoadProducts(`http://fakestoreapi.com/products/category/${$("#lstCategories").val()}`);
                }
            })

            var cartItems = [];

            $(document).on("click", "#btnAdd", (e)=>{
                 $.ajax({
                    method: "get",
                    url: `http://fakestoreapi.com/products/${e.target.value}`,
                    success: (product)=> {
                        cartItems.push(product);
                        alert(`${product.title}\nAdded to Cart`);
                        console.log(cartItems);
                    }
                 })
            })

        })
    </script>
</head>
<body class="container-fluid">
    <header class="bg-dark text-white text-center p-2">
        <div class="h2">Fakestore API</div>
    </header>
    <section class="mt-3 row">
        <nav class="col-2">
           <label class="form-label fw-bold">Select Category</label>
           <div>
              <select class="form-select" id="lstCategories">

              </select>
           </div>
        </nav>
        <main class="col-10 d-flex flex-wrap overflow-auto" style="height:500px">

        </main>
    </section>
</body>
</html>

Ex: SPA [Single Page Application]

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script>
        function LoadPage(url){
            $("main").html("");
            $.ajax({
                method:'get',
                url: url,
                success:(content) => {
                    $("main").append(content);
                }
            })
        }

        $(function(){
             $("button").click((e)=>{
                 switch(e.target.value){
                     case 'shopper':
                     LoadPage('../shopper-template.html');
                     break;
                     case 'landkit':
                     LoadPage('../landkit-template.html');
                     break;
                     case 'emi':
                     LoadPage('../javascript-examples/emi-calculator.html');
                     break;
                     case 'kfc':
                     LoadPage('../javascript-examples/kfc-online.html');
                     break;
                 }
             })
        })
    </script>
</head>
<body class="container-fluid">
   
        <h3>My Projects</h3>
        <div class="btn-toolbar bg-danger">
            <button value="shopper" class="btn btn-danger">Shopper</button>
            <button value="landkit" class="btn btn-danger">Ladkit</button>
            <button value="emi" class="btn btn-danger">EMI Calculator</button>
            <button value="kfc" class="btn btn-danger">KFC Online</button>
        </div>
 
    <main>

    </main>
</body>
</html>

Class98= Date 23dec2023

========================== jQuery UI and Ajax Cycle =========================

jQuery Ajax Life Cycle Methods
- Life cycle is the process of executing ajax request in various phases.
- Ajax provides pre-defined methods that track the request and send response.
- The life cycle methods are
    ajaxStart()
    ajaxSend()
    ajaxSuccess()
    ajaxComplete()
    ajaxError()
    ajaxStop()

Ex:
1. Add a new file into "data" folder
        ticket.json

{
    "Name": "John D",
    "Departure": "14-01-2024",
    "Source": "Hyderabad",
    "Destination": "Delhi",
    "Status": "Confirmed"
}

2. ticket.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="../node_modules/jquery/dist/jquery.js"> </script>
    <script>
        function GetTicket(){
            $.ajax({
                    method: "get",
                    url: "../data/ticket.json",
                    success: (ticket)=> {
                        $(`
                          <dl>
                            <dt>Name</dt>
                            <dd>${ticket.Name}</dd>
                            <dt>Departure From</dt>
                            <dd>${ticket.Source}</dd>
                            <dt>Arrival At </dt>
                            <dd>${ticket.Destination}</dd>
                            <dt>Status</dt>
                            <dd>${ticket.Status}</dd>
                          </dl>
                        `).appendTo("#container");
                    }
                 })
               }
        $(function(){
            $("button").click(()=>{
                GetTicket();
            })
        })
        .ajaxStart(()=>{
            setTimeout(()=>{$("p").html(`You requested for Ticket Details`)}, 3000);
        })
        .ajaxSend(()=>{
            setTimeout(()=>{$("p").html(`You request sent to server`)}, 5000);
        })
        .ajaxComplete(()=>{
            setTimeout(()=>{$("p").html(`You request processed Successfully`)}, 8000);
        })
        .ajaxSuccess(()=>{
            setTimeout(()=>{$("p").html(`Ticket Details Found - Fetching..`)}, 12000);
        })
        .ajaxStop(()=> {
            setTimeout(()=>{$("p").html(`Response Sent to you - Please Check the Details`); $("#container").css("display","block");}, 15000);
           
        })
        .ajaxError(()=>{
            alert(`Something went wrong - please try again`);
        })
    </script>
</head>
<body>
    <button>Book Ticket</button>
    <p>
    </p>
    <div id="container" style="display: none;">

    </div>
</body>
</html>

                                  jQuery UI
- It is a component library like bootstrap.
- It provides pre-defined components for building interactive UI.
- jQuery UI have
    a) Interactions
    b) Widgets
    c) Plugin's

Setup jQuery UI:
1. Visit the offical site
    https://jqueryui.com/

2. Download the UI library
    [Stable Version]

3. Open the "Zip" folder => Extract all files => Copy All files

4. Go to your project "node_modules"

5. Create a new folder "jquery-ui"

6. Paste all UI library files.

7. You have to link
        jquery-ui.js
        jquery-ui.css

jQuery Interactions:
- The interactions of jquery include following.
    Draggable
    Droppable
    Resizable
    Selectable
    Sortable
- You can implement just by configuring a method.

Syntax:
    $("img").draggable();
    $("ol").sortable();

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/jquery-ui/jquery-ui.css">
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script src="../node_modules/jquery-ui/jquery-ui.js"></script>
    <script>
        $(function(){
            $("img").resizable();
            $("ol").sortable();
        })
    </script>
</head>
<body>
    <img src="../public/images/women-fashion.jpg" width="100" height="100">
    <ol>
        <li>CSS</li>
        <li>HTML</li>
        <li>JavaScript</li>
        <li>Bootstrap</li>
        <li>jQuery</li>
    </ol>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/jquery-ui/jquery-ui.css">
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script src="../node_modules/jquery-ui/jquery-ui.js"></script>
    <script>
        $(function(){
            $("#faqs").accordion();
            $("#alert").dialog();
        })
    </script>
</head>
<body>
    <div id="alert" title="JQuery Loaded">
        <p>jQuery UI components</p>
    </div>
    <h1 align="center">Frequently Asked Questions</h1>
    <div id="faqs">
            <h1>What is Netflix?</h1>
            <div>
                <p>Netflix is a streaming service that offers a wide variety of award-winning TV shows, movies, anime, documentaries and more â€“ on thousands of internet-connected devices.</p>

                <p> You can watch as much as you want, whenever you want, without a single ad â€“ all for one low monthly price. There's always something new to discover, and new TV shows and movies are added every week!</p>
            </div>
            <h1>How much does Netflix cost?</h1>
            <div>
                <p> You can watch as much as you want, whenever you want, without a single ad â€“ all for one low monthly price. There's always something new to discover, and new TV shows and movies are added every week!</p>
            </div>
    </div>
</body>
</html>

                        jQuery Plugin's

Class99= Date 26dec2023

======================= jQuery Plugins ======================

jQuery UI

- Interactions
    draggable
    resizeable
    sortable
    selectable
- Widgets
    accordion
    dialog
    datepicker etc..


                                  jQuery Plugins

- Plugin is an extention for application.
- jQuery provides various 3rd party plugins [extentions] which you can use for your application.
- Plugin comprises of pre-defined styles and logic, which you can customize and implement.

                        npmjs.com

Ex: Barcode

1. Install the following library

        >npm  i   jquery-ean13 --save

2. Import the library

    <script src="../node_modules/jquery-ean13/dist/jquery-ean13.js"></script>

3. Insert canvas element

    <canvas id="code" width="300" height="100"> </canvas>

4. Assign a 12 or 13 digit code in string format to canvas using EAN13()

    $("#code").EAN13("991133491112")

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script src="../node_modules/jquery-ean13/dist/jquery-ean13.js"></script>
    <script>
        $(function(){
             $("#code").EAN13("9988111200118");
        })
    </script>
</head>
<body>
    <img width="300" height="400" src="../public/images/iphone/m1.png">
    <br><br>
    <canvas id="code" width="300" height="100"></canvas>
</body>
</html>

Ex: jQuery Grid

1. Install  Grid library

    >npm  i  jsgrid --save

2. Import the CSS and supported jQuery files

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/jsgrid/dist/jsgrid.css">
    <link rel="stylesheet" href="../node_modules/jsgrid/dist/jsgrid-theme.css">

    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script src="../node_modules/jsgrid/dist/jsgrid.js"></script>
    <script>
         $(function(){
            $("#jsGrid").jsGrid({
                width: "100%",
                height: "400px",
           
                filtering: true,
                editing: true,
                sorting: true,
                paging: true,
           
                data: [
                    {Name: "Samsung TV", Price: 60000.33, Stock: true},
                    {Name: "Nike Casuals", Price:1200.33, Stock: false}
                ],
           
                fields: [
                    { name: "Name", type: "text", width: 150 },
                    { name: "Price", type: "number", width: 50 },
                    { name: "Stock", type: "checkbox", title: "In Stock", sorting: false },
                    { type: "control" }
                ]
            });
         })
    </script>
</head>
<body>
    <div id="jsGrid">

    </div>
</body>
</html>


Ex: Datepicker

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/jquery-ui/jquery-ui.css">
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script src="../node_modules/jquery-ui/jquery-ui.js"></script>
    <script>
         $(function(){
              $("#dept").datepicker();
         })
    </script>
</head>
<body>
    Departure :
    <input type="text" id="dept">
</body>
</html>

                                          jQuery Cookies

Class100= Date 27dec2023

======================= jQuery Cookies and Sass ======================


jQuery Cookies


1. Install Cookie library for jQuery

    >npm install  jquery.cookie  --save

2. Link the cookie library file

    <script src="../node_modules/jquery.cookie/jquery.cookie.js"></script>

3. Create a cookie

      $.cookie("name", "value", { expiry : daysNumber })

4. To access cookie value

      $.cookie("name")

5. To verify cookie

      $.cookie("name")===undefined         => returns true if cookie deleted

6. To remove cookie

      $.removeCookie("name")


Ex:
1. login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script src="../node_modules/jquery.cookie/jquery.cookie.js"></script>
    <script>
         $(function(){
             $("button").click(()=>{
                   $.cookie("username", $("#UserName").val(), { expires: 2 });
                   location.href = "success.html";
             })
         })
    </script>
</head>
<body>
    <h2>Login</h2>
    <input type="text" id="UserName" placeholder="User Name"> <button>Login</button>
</body>
</html>

2. success.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Success</title>
    <script src="../node_modules/jquery/dist/jquery.js"></script>
    <script src="../node_modules/jquery.cookie/jquery.cookie.js"></script>
    <script>
         $(function(){
              if($.cookie("username")===undefined) {
                  location.href = "login.html";
              } else {
                $("#lblName").html($.cookie("username"));
              }
           
            $("button").click(()=>{
                $.removeCookie("username");
                location.href = "login.html";
            })
         })
    </script>
</head>
<body>
    <h3>Hello ! <span id="lblName"></span> <button>Signout</button> </h3>
</body>
</html>

                                Sass
                      (Syntactically Awesome Style Sheet)

- It is CSS pre-processor or pre-compiler.
- It provides all programming features so that you can re-use, separate and make the logic simplified for styles.
- You have to trans compile sass into css.

Install Sass on your PC:

    C:\> npm  install  -g   sass


Create sass file in your project:

        input.scss

     .container {
     border:2px solid red;
     padding: 20px;
     h2 {
          color:red;
     }
     p {
        font-family:Arial;
     }
     }

Translate into CSS:
- Open the scss file location in terminal

     >sass  input.scss  output.css            // for compiling

- It will generate a new file by name output.css with css code.
- Link output.css to any HTML page.

Note: After every modification in SCSS file your have transcompile the code.

Ex:
1.  input.scss

.container {
    border: 2px solid red;
    border-radius: 20px;
    background-color: rgb(249, 214, 214);
    padding: 20px;
    h2 {
        color:rgb(187, 13, 13);
    }
    p {
        color:rgb(235, 130, 130);
    }
}

> sass input.scss  output.css

2. index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../src/scss/output.css">
</head>
<body>
    <div class="container">
        <h2>Delete Record</h2>
        <p>Record will be deleted</p>
    </div>
</body>
</html>

                                  Sass Variables
- Sass variables are declared by using
     $name : value;

- Value can any CSS value type.
        10px, Arial,  red ...

- You can access and use variable by using "$refName"

Ex:
input.scss

$bgcolor : rgb(214, 249, 226);
$txtColor : green;

.container {
    border: 2px solid red;
    border-radius: 20px;
    background-color: $bgcolor;
    padding: 20px;
    h2 {
        color:$txtColor;
    }
    p {
        color:rgb(235, 130, 130);
    }
}
table {
    background-color: $bgcolor;
    color: $txtColor;
}


index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../src/scss/output.css">
</head>
<body>
    <div class="container">
        <h2>Delete Record</h2>
        <p>Record will be deleted</p>
    </div>
    <br><br>
    <table width="300" border="1">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
            </tr>
        </thead>
    </table>
</body>
</html>


                        Sass Built in Functions
                            [Statements]
- @If
- @else if
- @else
- @for

Syntax:
    @if  condition
    {

    }
    @else
    {
    }

Ex:
input.scss

$bgcolor : gray;
$txtColor : black;
$border : 2px solid black;
$themeName : red;


@if $themeName==green
{
    $bgcolor : rgb(214, 249, 226);
    $txtColor : green;
    $border : 2px solid green;
}
@else if $themeName==red
{
    $bgcolor : rgb(249, 217, 214);
    $txtColor : rgb(128, 0, 0);
    $border : 2px solid red;
} @else {
    $bgcolor : gray;
    $txtColor : black;
    $border : 2px solid black;
}

.container {
    border: $border;
    border-radius: 20px;
    background-color: $bgcolor;
    padding: 20px;
    h2 {
        color:$txtColor;
    }
    p {
        color:rgb(235, 130, 130);
    }
}

index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../src/scss/output.css">
</head>
<body>
    <div class="container">
        <h2>Delete Record</h2>
        <p>Record will be deleted</p>
    </div>
   
</body>
</html>

Syntax:
    @for  $i  from 1 through 10
    {
    }

    #{ }         => binding expression

Ex:
input.scss

div {
    width: 100px;
    height: 100px;
    border:2px solid black;
}
@for $i from 1 through 4
{
     .box-#{$i} {
        margin-left: $i * 100px;
     }
}

index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../src/scss/output.css">
</head>
<body>
    <div class="box-1">
        <img src="../public/images/a1.jpg" width="100" height="100">
    </div>
    <div class="box-2">
        <img src="../public/images/a2.jpg" width="100" height="100">
    </div>
    <div class="box-3">
        <img src="../public/images/a3.jpg" width="100" height="100">
    </div>
    <div class="box-4">
        <img src="../public/images/a4.jpg" width="100" height="100">
    </div>

</body>
</html>


Class83- Date 04dec2023

========================== Functions in JavaScript ========================

Rest Parameters
Spread Operator
                       
					   Function Return
                    ----------------------
					
- A function with return allows to configure a functionality and store the data.
- A function can return any type of data
    a) Primitive
    b) Non Primitive
    c) Function

Ex:
<script>
   function Addition(a, b){                => returns number
      return a + b;
   }
   function Result(){
      document.write(`Addition=${Addition(30,50)}`);
   }
   Result();
</script>

Ex: Return Array

<script>
   function GetCategories()
   {
       return ["All", "Electronics", "Fashion"];
   }
   GetCategories().map(function(category){
      document.write(category + "<br>");
   })
</script>

                       Function Closure
                       -----------------------
- Closure is a technique used in function configuration, where the members of outer function are accessible to inner function.
- Every function by default uses a closure mechanism.

Syntax:
    function Outer()
    {
         //closure
        var x = 10;
        function Inner(){    
           var y = 20;
           return  x + y;
        }
        document.write("Result=" + Inner());
    }


Ex:
<script>
      function Outer(){
           var a = 10;
           function Inner(){
              var b = 20;
              var c = a + b;
              return c;
           }
           document.write("C=" + Inner());
      }
      Outer();
</script>

Ex: Function returning another function

<script>
      function Component()
      {
          return (function(){
            return "<h2>Welcome to Functions</h2>";
          });
      }
      document.write(Component()());
</script>

FAQ: Can function have multiple returns?
Ans : Yes.

FAQ: Why we need multiple returns?
Ans:  To achive conditional rendering.

Ex:
<script>
      function Component(markup)
      {
           if(markup=="login"){
              return `
                <h2>User Login </h2>
                <dl>
                   <dt>User Name</dt>
                   <dd><input type="text"></dd>
                   <dt>Password</dt>
                   <dd><input type="password"></dd>
                </dl>
                <button>Login</button>
              `;
           } else if (markup=="register"){
               return `
               <h2>Register </h2>
                <dl>
                   <dt>User Name</dt>
                   <dd><input type="text"></dd>
                   <dt>Password</dt>
                   <dd><input type="password"></dd>
                   <dt>Mobile</dt>
                   <dd><input type="text"></dd>
                </dl>
                <button>Register</button>
               `;
           } else {
              return `Please Choose Login or Register`;
           }
      }
      document.write(Component(prompt("Enter Component Name", "login|register")));
</script>

                        Function Recursion
                        ---------------------------

- Recursion is a technique where the function is called within the context of same function.
- It is mostly used to configure batch operations.

Syntax:
    function  Name()
    {
           Name();
    }

Ex:
<script>
      function Factorial(n){
          if(n==1) {
             return 1;
          } else {
              return n * Factorial(n-1);
          }
      }
      document.write(`Factorial of 6 is ${Factorial(6)}`);
</script>

                        Function  Generator
                        ---------------------------

Ex:
<script>
     function* Collection()
     {
        yield "A";
        yield "B";
        yield "C";
     }
     var obj = Collection();
     console.log(obj.next().value);
     console.log(obj.next().value);
     console.log(obj.next().value);
</script>
